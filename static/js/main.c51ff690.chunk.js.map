{"version":3,"sources":["utils/index.ts","components/VideoListItem.tsx","constants/index.ts","services/API.ts","services/Playlist.ts","services/AudioManager.ts","context/index.ts","components/VideoList.tsx","components/SearchBar.tsx","components/Player.tsx","components/PlaylistRenderer.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["zeroPad","num","places","String","padStart","durationToSeconds","duration","numbers","split","result","base","i","length","parseInt","openLink","link","a","document","createElement","href","target","rel","click","VideoListItem","video","playing","onAddClick","onPlayClick","onLaunchClick","title","author","thumbnail","url","bestThumbnail","onAddClickHandler","useCallback","id","onLaunchClickHandler","onPlayClickHandler","className","clsx","src","alt","loading","name","IconButton","onClick","color","URL","theme","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","api","cache","suggestionsCache","this","videoId","fetch","res","json","forEach","v","searchTerm","formatSearchTearm","encodeURIComponent","replace","items","type","continuation","method","headers","body","JSON","stringify","playlist","videoIds","current","add","bind","next","indexOf","push","map","getInfo","vid","newCur","suggest","suggestions","suggestion","audioManager","audio","Audio","updateAudio","getAudioURL","videoContext","createContext","videos","playlistActionContext","playVideo","addToPlaylist","addToPlaylistThenPlay","autoplayContext","autoplay","setAutoplay","videoListenerContext","onVideoEnd","onVideoStart","VideoList","spaceBottom","loadVideos","useState","setLoading","useContext","onScroll","e","d","currentTarget","scrollHeight","offsetHeight","scrollTop","then","youtubeLink","getYoutubeLink","LinearProgress","style","height","SearchBar","onChange","onSubmit","input","setInput","inputMode","setInputMode","onKeyPress","evt","charCode","blur","handleInputChange","value","handleClear","handleBack","handleSearch","AppBar","position","Toolbar","edge","Input","placeholder","fullWidth","endAdornment","InputAdornment","aria-label","Typography","flex","Player","videoDetails","setPlaying","curVId","setCurVId","currentTime","setCurrentTime","useEffect","ontimeupdate","Math","ceil","onpause","onloadeddata","onloadstart","onplay","onended","setupForNewVideo","play","catch","console","log","time","download","getAudioDownloadLink","playOrPause","pause","onSliderChange","_","val","handleAutoplayBtn","floor","Slider","max","min","padding","CircularProgress","size","Tooltip","variant","noWrap","PlaylistRenderer","playlistVideos","currentIndex","on","setOn","setSuggestions","currentVId","setCurrentVId","toggleExpand","getSuggestions","Provider","open","info","component","paddingTop","paddingBottom","App","setVideos","end","setEnd","setPlaylistVideos","setContinuation","setCurrent","setSearchTerm","onSearchTermChange","txt","onSearch","search","filter","addSuggestionToPlaylist","undefined","setCurByVid","loadMoreSearchResult","searchContinue","newVideos","concat","ThemeProvider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c51ff690.chunk.js","sourcesContent":["import {SuggestVideo} from '../types'\r\n\r\nexport const zeroPad = (num: number, places: number) => String(num).padStart(places, '0')\r\n\r\nexport const formatTime = (time: number) => {\r\n    time = Math.ceil(time)\r\n    return `${zeroPad(Math.floor(time/60), 2)}:${zeroPad(time%60, 2)}`\r\n}\r\n\r\nexport const durationToSeconds = (duration: string | null): number => {\r\n    if (duration === null) {\r\n        return 0\r\n    }\r\n    const numbers = duration.split(':')\r\n    let result: number = 0\r\n    let base = 1\r\n    for (let i = 0 ; i < numbers.length ; i++) {\r\n        result += parseInt(numbers[numbers.length - 1 - i])*base\r\n        base *= 60\r\n    }\r\n    return result\r\n}\r\n\r\nexport const isSuggestVideo = (obj: any): obj is SuggestVideo => {\r\n    return obj.thumbnail\r\n}\r\n\r\nexport const openLink = (link: string) => {\r\n    const a = document.createElement('a')\r\n    a.href = link\r\n    a.target = '_blank'\r\n    a.rel = 'no-referrer'\r\n    a.click()\r\n}","import React, { useCallback } from 'react'\r\nimport {Video} from 'ytsr'\r\nimport {SuggestVideo} from '../types'\r\nimport { isSuggestVideo } from '../utils'\r\nimport {IconButton} from '@material-ui/core'\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline'\r\nimport LaunchIcon from '@material-ui/icons/Launch'\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline'\r\nimport clsx from 'clsx'\r\nimport './VideoListItem.css'\r\n\r\ninterface Props {\r\n    video: Video | SuggestVideo;\r\n    playing?: boolean;\r\n    onAddClick?: (vid: string) => void;\r\n    onPlayClick?: (vid: string) => void;\r\n    onLaunchClick?: (vid: string) => void;\r\n}\r\n\r\nconst VideoListItem = ({ video, playing, onAddClick, onPlayClick, onLaunchClick }: Props) => {\r\n    const {title, author} = video\r\n    const thumbnail = isSuggestVideo(video) ? video.thumbnail.url : video.bestThumbnail.url\r\n\r\n    const onAddClickHandler = useCallback(() => {\r\n        if (onAddClick) {\r\n            onAddClick(video.id)\r\n        }\r\n    }, [video, onAddClick])\r\n\r\n    const onLaunchClickHandler = useCallback(() => {\r\n        if (onLaunchClick) {\r\n            onLaunchClick(video.id)\r\n        }\r\n    }, [video, onLaunchClick])\r\n\r\n    const onPlayClickHandler = useCallback(() => {\r\n        if (onPlayClick) {\r\n            onPlayClick(video.id)\r\n        }\r\n    }, [video, onPlayClick])\r\n\r\n    return (\r\n        <div className={clsx('video-list-item-container', {playing})}>\r\n            {thumbnail && <img\r\n                src={thumbnail}\r\n                className='video-list-item-thumbnail'\r\n                alt='thumbnail'\r\n                loading='lazy'\r\n            />}\r\n            <div className='video-list-item-content'>\r\n                <div className='video-list-item-title single-line'>\r\n                    {title}\r\n                </div>\r\n                <div className='video-list-item-subtitle single-line'>\r\n                    {author?.name}\r\n                </div>\r\n                <div className='video-list-item-row tools'>\r\n                    {onPlayClick && <IconButton onClick={onPlayClickHandler} color='secondary'>\r\n                        <PlayCircleOutlineIcon/>\r\n                    </IconButton>}\r\n                    {onAddClick && <IconButton onClick={onAddClickHandler} color='secondary'>\r\n                        <AddCircleOutlineIcon/>\r\n                    </IconButton>}\r\n                    {onLaunchClick && <IconButton onClick={onLaunchClickHandler} color='secondary'>\r\n                        <LaunchIcon/>\r\n                    </IconButton>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoListItem","import {createMuiTheme} from '@material-ui/core'\r\n\r\nexport const URL = 'https://zb3ad4304-gtw.qovery.io'\r\n\r\nexport const theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            light: '#303030',\r\n            main: '#000',\r\n            dark: '#303030',\r\n            contrastText: '#ffa600',\r\n        },\r\n        secondary: {\r\n            light: '#fff',\r\n            main: '#ffa600',\r\n            dark: '#fff',\r\n            contrastText: '#fff',\r\n        }\r\n    }\r\n})","import {URL} from '../constants'\r\nimport { VideoCache, SuggestVideo, SuggestionsCache } from '../types'\r\nimport { Result as SearchResult, Video, Continuation, ContinueResult } from 'ytsr'\r\n\r\nexport class API {\r\n    private url: string\r\n    private cache: VideoCache\r\n    private suggestionsCache: SuggestionsCache\r\n    constructor(url: string) {\r\n        this.url = url\r\n        this.cache = {}\r\n        this.suggestionsCache = {}\r\n    }\r\n    public getYoutubeLink(videoId: string): string {\r\n        return `https://youtu.be/${videoId}`\r\n    }\r\n    public getInfo(videoId: string): Video | SuggestVideo {\r\n        return this.cache[videoId]\r\n    }\r\n    public getAudioURL(videoId: string): string {\r\n        return `${this.url}/stream/v2?vid=${videoId}`\r\n    }\r\n    public getAudioDownloadLink(videoId: string): HTMLAnchorElement {\r\n        const a = document.createElement('a')\r\n        a.href = `${this.url}/download?vid=${videoId}`\r\n        a.target = '_blank'\r\n        return a\r\n    }\r\n    public async suggest(videoId: string): Promise<Array<SuggestVideo> | null> {\r\n        if (videoId in this.suggestionsCache) {\r\n            return this.suggestionsCache[videoId]\r\n        }\r\n        try {\r\n            const res = await fetch(`${URL}/suggest?vid=${videoId}`)\r\n            const result: SuggestVideo[] = await res.json()\r\n            result.forEach(v => {\r\n                if (!(v.id in this.cache)) {\r\n                    this.cache[v.id] = v\r\n                }\r\n            })\r\n            this.suggestionsCache[videoId] = result\r\n            return result\r\n        } catch (err) {\r\n            return null\r\n        }\r\n    }\r\n    public async search(searchTerm: string): Promise<SearchResult | null> {\r\n        const formatSearchTearm = encodeURIComponent(searchTerm.replace(' ', '+'))\r\n        try {\r\n            const res = await fetch(`${URL}/search?q=${formatSearchTearm}`)\r\n            const result: SearchResult = await res.json()\r\n            result.items.forEach(i => {\r\n                if (i.type === 'video') {\r\n                    this.cache[i.id] = i\r\n                }\r\n            })\r\n            return result\r\n        } catch (err) {\r\n            return null\r\n        }\r\n    }\r\n    public async searchContinue(continuation: Continuation): Promise<ContinueResult | null> {\r\n        try {\r\n            const res = await fetch(`${URL}/search`, {\r\n                method: 'post',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(continuation)\r\n            })\r\n            const result: SearchResult = await res.json()\r\n            result.items.forEach(i => {\r\n                if (i.type === 'video') {\r\n                    this.cache[i.id] = i\r\n                }\r\n            })\r\n            return result\r\n        } catch (err) {\r\n            return null\r\n        }\r\n    }\r\n}\r\n\r\nexport const api = new API(URL);","import { SuggestVideo } from '../types'\r\nimport { Video } from 'ytsr'\r\nimport {API, api} from './API'\r\n\r\nexport class Playlist {\r\n    private videoIds: Array<string>;\r\n    public current: number;\r\n    private api: API;\r\n    constructor(api: API, videoIds?: Array<string>) {\r\n        this.videoIds = videoIds ? videoIds : []\r\n        this.current = -1\r\n        this.api = api\r\n        this.add = this.add.bind(this)\r\n        this.next = this.next.bind(this)\r\n    }\r\n    add(videoId: string) {\r\n        if (this.videoIds.indexOf(videoId) === -1) {\r\n            this.videoIds.push(videoId)\r\n        }\r\n    }\r\n    get playlistVideos(): Array<Video | SuggestVideo> {\r\n        return this.videoIds.map(id => this.api.getInfo(id))\r\n    }\r\n    setCurByVid(vid: string): number | void {\r\n        const newCur = this.videoIds.indexOf(vid)\r\n        if (newCur !== -1) {\r\n            this.current = newCur\r\n            return this.current\r\n        }\r\n    }\r\n    next(): number | void {\r\n        if (this.current < this.videoIds.length - 1) {\r\n            this.current += 1\r\n            return this.current\r\n        }\r\n    }\r\n    // return a suggested video id that is not in the playlist\r\n    public async suggest(): Promise<string | void> {\r\n        const videoId = this.videoIds[this.current]\r\n        const suggestions = await this.api.suggest(videoId)\r\n        if (suggestions) {\r\n            for (let suggestion of suggestions) {\r\n                const isNotInPlaylist = this.videoIds.indexOf(suggestion.id) === -1\r\n                if (isNotInPlaylist) {\r\n                    return suggestion.id\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const playlist = new Playlist(api)","import {API, api} from './API'\r\n\r\nexport class AudioManager {\r\n    public audio: HTMLAudioElement\r\n    private vid?: string;\r\n    private api: API\r\n    constructor(api: API, vid?: string) {\r\n        this.api = api\r\n        this.audio = new Audio()\r\n        if (vid) {\r\n            this.updateAudio(vid)\r\n        }\r\n    }\r\n\r\n    public updateAudio(vid: string): void {\r\n        if (vid === this.vid) return\r\n        this.vid = vid\r\n        const url = this.api.getAudioURL(vid)\r\n        this.audio.src = url\r\n    }\r\n}\r\n\r\nexport const audioManager = new AudioManager(api);","import { createContext } from 'react'\r\nimport { Video } from 'ytsr'\r\nimport { SuggestVideo } from '../types'\r\n\r\nexport const videoContext = createContext<{ videos: Array<Video | SuggestVideo> }>({\r\n    videos: []\r\n})\r\n\r\nexport const playlistActionContext = createContext<{\r\n    playVideo: (index: number) => void,\r\n    addToPlaylist: (videoId: string) => void,\r\n    addToPlaylistThenPlay: (videoId: string) => void\r\n}>({\r\n    playVideo: () => { },\r\n    addToPlaylist: () => { },\r\n    addToPlaylistThenPlay: () => { }\r\n})\r\n\r\nexport const autoplayContext = createContext<{ autoplay: boolean, setAutoplay: (on: boolean) => void }>({\r\n    autoplay: true,\r\n    setAutoplay: () => { }\r\n})\r\n\r\nexport const videoListenerContext = createContext<{ onVideoEnd: () => void, onVideoStart: () => void }>({\r\n    onVideoEnd: () => { },\r\n    onVideoStart: () => { },\r\n})","import React, { useCallback, useState, useContext } from 'react'\r\nimport VideoListItem from './VideoListItem'\r\nimport { LinearProgress } from '@material-ui/core'\r\nimport { api } from '../services'\r\nimport { openLink } from '../utils'\r\nimport { videoContext, playlistActionContext } from '../context'\r\n\r\ninterface Props{\r\n    loadVideos?: () => Promise<void>;\r\n    className?: string;\r\n    spaceBottom?: boolean;\r\n}\r\n\r\nconst VideoList = ({className, spaceBottom, loadVideos}: Props) => {\r\n    const [loading, setLoading] = useState<boolean>(false)\r\n    const {videos} = useContext(videoContext)\r\n    const {addToPlaylist, addToPlaylistThenPlay} = useContext(playlistActionContext)\r\n    const onScroll: React.UIEventHandler<HTMLDivElement> = useCallback((e) => {\r\n        const d = e.currentTarget\r\n        if (loadVideos && !loading && d.scrollHeight - d.offsetHeight - d.scrollTop < 2) {\r\n            setLoading(true)\r\n            loadVideos().then(() => setLoading(false))\r\n        }\r\n    }, [loadVideos, loading])\r\n\r\n    const onAddClick = useCallback((videoId: string) => {\r\n        addToPlaylist(videoId)\r\n    }, [addToPlaylist])\r\n\r\n    const onLaunchClick = useCallback((videoId: string) => {\r\n        const youtubeLink = api.getYoutubeLink(videoId)\r\n        openLink(youtubeLink)\r\n    }, [])\r\n\r\n    const onPlayClick = useCallback((videoId: string) => {\r\n        addToPlaylistThenPlay(videoId)\r\n    }, [addToPlaylistThenPlay])\r\n    \r\n    return (\r\n    <div \r\n    className={className}\r\n    onScroll={onScroll}>\r\n        {videos.map(v =>\r\n            <VideoListItem\r\n                video={v}\r\n                key={v.id}\r\n                onAddClick={onAddClick}\r\n                onPlayClick={onPlayClick}\r\n                onLaunchClick={onLaunchClick}/>)}\r\n        {loading && <LinearProgress/>}\r\n        {spaceBottom && <div style={{height: 100}}/>}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default VideoList","import React, { useCallback, useState } from 'react'\r\nimport { Input, AppBar, Toolbar, InputAdornment, IconButton, Typography } from '@material-ui/core'\r\nimport ClearIcon from '@material-ui/icons/Clear'\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport './SearchBar.css'\r\n\r\ninterface Props{\r\n    onChange: (evt: any) => void;\r\n    onSubmit: () => void;\r\n}\r\n\r\nconst SearchBar = ({ onChange, onSubmit }: Props) => {\r\n    const [input, setInput] = useState<string>('')\r\n    const [inputMode, setInputMode] = useState<boolean>(false)\r\n\r\n    const onKeyPress = useCallback(evt => {\r\n        if (evt.charCode === 13) {\r\n            onSubmit()\r\n            evt.target.blur()\r\n        }\r\n    }, [onSubmit])\r\n\r\n    const handleInputChange = useCallback(evt => {\r\n        setInput(evt.target.value)\r\n        onChange(evt)\r\n    }, [onChange])\r\n\r\n    const handleClear = useCallback(() => {\r\n        setInput('')\r\n    }, [])\r\n\r\n    const handleBack = useCallback(() => {\r\n        setInputMode(false)\r\n    }, [])\r\n\r\n    const handleSearch = useCallback(() => {\r\n        setInputMode(true)\r\n    }, [])\r\n    return (\r\n            <AppBar position='static'>\r\n                {inputMode ?\r\n                <Toolbar>\r\n                    <IconButton color='secondary' edge=\"start\" onClick={handleBack}>\r\n                        <ArrowBackIosIcon/>\r\n                    </IconButton>\r\n                    <Input\r\n                        color='secondary'\r\n                        style={{color: 'white'}}\r\n                        placeholder=\"Search\"\r\n                        value={input}\r\n                        onChange={handleInputChange}\r\n                        onKeyPress={onKeyPress}\r\n                        fullWidth\r\n                        endAdornment={\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                aria-label=\"clear input\"\r\n                                color='secondary'\r\n                                onClick={handleClear}>\r\n                                    <ClearIcon/>\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        }/>\r\n                </Toolbar> : \r\n                <Toolbar>\r\n                    <Typography style={{flex: 1}}>YT Audio</Typography>\r\n                    <IconButton color='secondary' onClick={handleSearch}>\r\n                        <SearchIcon/>\r\n                    </IconButton>\r\n                </Toolbar>}\r\n            </AppBar>)\r\n}\r\n\r\nexport default SearchBar","import React, { useCallback, useEffect, useState, useContext } from 'react'\r\nimport { Slider, IconButton, Typography, Tooltip, CircularProgress } from '@material-ui/core'\r\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled'\r\nimport PauseCircleFilledIcon from '@material-ui/icons/PauseCircleFilled'\r\nimport { formatTime, durationToSeconds } from '../utils'\r\nimport { api, audioManager } from '../services'\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow'\r\nimport PauseIcon from '@material-ui/icons/Pause'\r\nimport DownloadIcon from '@material-ui/icons/GetApp'\r\nimport { Video } from 'ytsr'\r\nimport { SuggestVideo } from '../types'\r\nimport { autoplayContext, videoListenerContext } from '../context'\r\nimport './Player.css'\r\n\r\n\r\ninterface Props {\r\n    videoDetails: Video | SuggestVideo;\r\n}\r\n\r\nconst Player = ({ videoDetails }: Props) => {\r\n    const [playing, setPlaying] = useState<boolean>(false)\r\n    const [curVId, setCurVId] = useState<string | null>(null)\r\n    const [loading, setLoading] = useState<boolean>(false)\r\n    const [currentTime, setCurrentTime] = useState<number>(0)\r\n    const {autoplay, setAutoplay} = useContext(autoplayContext)\r\n    const {onVideoEnd, onVideoStart} = useContext(videoListenerContext)\r\n\r\n    useEffect(() => {\r\n        audioManager.audio.ontimeupdate = () => setCurrentTime(Math.ceil(audioManager.audio.currentTime))\r\n        audioManager.audio.onpause = () => setPlaying(false)\r\n        audioManager.audio.onloadeddata = () => setLoading(false)\r\n        audioManager.audio.onloadstart = () => setLoading(true)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        audioManager.audio.onplay = () => {\r\n            setPlaying(true)\r\n            if (onVideoStart) {\r\n                onVideoStart()\r\n            }\r\n        }\r\n        audioManager.audio.onended = () => {\r\n            setPlaying(false)\r\n            if (onVideoEnd) {\r\n                onVideoEnd()\r\n            }\r\n        }\r\n    }, [onVideoStart, onVideoEnd])\r\n\r\n    const setupForNewVideo = useCallback((videoDetails: Video | SuggestVideo) => {\r\n        setCurVId(videoDetails.id)\r\n        audioManager.updateAudio(videoDetails.id)\r\n        setCurrentTime(0)\r\n        if (autoplay) {\r\n            audioManager.audio.play().catch(console.log)\r\n        }\r\n    }, [autoplay])\r\n\r\n    useEffect(() => {\r\n        if (curVId !== videoDetails.id) {\r\n            setupForNewVideo(videoDetails)\r\n        }\r\n    }, [setupForNewVideo, curVId, videoDetails])\r\n\r\n    const download = useCallback(() => {\r\n        const a = api.getAudioDownloadLink(videoDetails.id)\r\n        a.click()\r\n    }, [videoDetails])\r\n\r\n    const playOrPause = useCallback(() => {\r\n        if (playing) {\r\n            audioManager.audio.pause()\r\n        } else {\r\n            audioManager.audio.play()\r\n        }\r\n    }, [playing])\r\n\r\n    const onSliderChange = useCallback((_, val) => {\r\n        audioManager.audio.currentTime = val\r\n    }, [])\r\n\r\n    const handleAutoplayBtn = useCallback(() => {\r\n        setAutoplay(!autoplay)\r\n    }, [autoplay, setAutoplay])\r\n\r\n    return (\r\n        <div className='player-container'>\r\n            <div className='player-progress-container'>\r\n                <span className='player-current-time'>{formatTime(currentTime)}</span>\r\n                <Slider color='secondary' onChange={onSliderChange} max={durationToSeconds(videoDetails.duration)} min={0} value={currentTime} />\r\n                <span className='player-end-time'>{videoDetails.duration}</span>\r\n            </div>\r\n            <div className='player-bottom-container'>\r\n                {loading ? <div style={{ padding: 12 }}><CircularProgress color='secondary' size={22} /></div> :\r\n                    <IconButton onClick={playOrPause} color='secondary'>\r\n                        {playing ? <PauseIcon /> : <PlayArrowIcon />}\r\n                    </IconButton>}\r\n                <IconButton onClick={download} color='secondary'>\r\n                    <DownloadIcon />\r\n                </IconButton>\r\n                <Tooltip title=\"autoplay\">\r\n                    <IconButton onClick={handleAutoplayBtn} color='secondary'>\r\n                        {autoplay ? <PauseCircleFilledIcon /> : <PlayCircleFilledIcon />}\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <div className='player-details-container'>\r\n                    <Typography variant=\"subtitle1\" noWrap>{videoDetails.title}</Typography>\r\n                    <Typography variant=\"subtitle2\" style={{ color: 'silver' }} noWrap>{videoDetails.author?.name}</Typography>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Player","import React, { useState, useCallback, useEffect, useContext } from \"react\"\r\nimport clsx from 'clsx'\r\nimport './PlaylistRenderer.css'\r\nimport {IconButton, LinearProgress, Typography} from '@material-ui/core'\r\nimport Up from '@material-ui/icons/ExpandLess'\r\nimport Down from '@material-ui/icons/ExpandMore'\r\nimport Player from './Player'\r\nimport VideoList from './VideoList'\r\nimport {Video} from 'ytsr'\r\nimport VideoListItem from \"./VideoListItem\"\r\nimport {SuggestVideo} from '../types'\r\nimport {api} from '../services'\r\nimport { openLink } from \"../utils\"\r\nimport {videoContext, playlistActionContext} from '../context'\r\n\r\ninterface Props {\r\n    playlistVideos: Array<Video | SuggestVideo>;\r\n    currentIndex: number;\r\n}\r\n\r\nconst PlaylistRenderer = ({playlistVideos, currentIndex}: Props) => {\r\n    const [on, setOn] = useState<boolean>(false)\r\n    const [suggestions, setSuggestions] = useState<SuggestVideo[]>([])\r\n    const [loading, setLoading] = useState<boolean>(false)\r\n    const [currentVId, setCurrentVId] = useState<string | null>(null)\r\n    const {playVideo} = useContext(playlistActionContext)\r\n\r\n    const toggleExpand = useCallback(() => {\r\n        setOn(!on)\r\n    }, [on])\r\n\r\n    const getSuggestions = useCallback(async (vid: string) => {\r\n        setLoading(true)\r\n        const res = await api.suggest(vid)\r\n        if (res) {\r\n            setSuggestions(res)\r\n        } else {\r\n            setSuggestions([])\r\n        }\r\n        setLoading(false)\r\n    }, [])\r\n\r\n    const onLaunchClick = useCallback((videoId: string) => {\r\n        const youtubeLink = api.getYoutubeLink(videoId)\r\n        openLink(youtubeLink)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (currentVId) {\r\n            getSuggestions(currentVId)\r\n        }\r\n    }, [currentVId, getSuggestions])\r\n\r\n    useEffect(() => {\r\n        setCurrentVId(playlistVideos[currentIndex]?.id)\r\n    }, [currentIndex, playlistVideos])\r\n\r\n    return (\r\n        <videoContext.Provider value={{videos: suggestions}}>\r\n        <div className={clsx('playlist', {open: on})}>\r\n            <div className='top-section'>\r\n                <div className='player-container'>\r\n                {currentIndex >= playlistVideos.length?\r\n                    <LinearProgress/> :\r\n                    <Player videoDetails={playlistVideos[currentIndex]}/>}\r\n                </div>\r\n                <IconButton onClick={toggleExpand} color='secondary'>\r\n                    {on ? <Down/> : <Up/>}\r\n                </IconButton>\r\n            </div>\r\n            <div className='lists-container'>\r\n            <div className={clsx('list')}>\r\n                {playlistVideos\r\n                    .map((info, id) =>\r\n                        <VideoListItem\r\n                            key={`playlist${id}`}\r\n                            video={info}\r\n                            onPlayClick={() => playVideo(id)}\r\n                            onLaunchClick={onLaunchClick}\r\n                            playing={id === currentIndex}/>)}\r\n            </div>\r\n            <Typography className={clsx('divider')} variant='h5' component='h5'>Suggested</Typography>\r\n            {loading ?\r\n                <div style={{paddingTop: 30, paddingBottom: 30}}><LinearProgress/></div> : <VideoList className={clsx('list')}/>\r\n            }\r\n            </div>\r\n        </div>\r\n        </videoContext.Provider>\r\n    )\r\n}\r\n\r\nexport default PlaylistRenderer","import './App.css';\r\nimport { useState, useCallback } from 'react'\r\nimport VideoList from './components/VideoList'\r\nimport SearchBar from './components/SearchBar'\r\nimport PlaylistRenderer from './components/PlaylistRenderer'\r\nimport { theme } from './constants'\r\nimport { api, playlist } from './services'\r\nimport { LinearProgress, ThemeProvider } from '@material-ui/core'\r\nimport {Video, Continuation} from 'ytsr'\r\nimport { useEffect } from 'react';\r\nimport { SuggestVideo } from './types';\r\nimport { videoContext, autoplayContext, videoListenerContext, playlistActionContext } from './context'\r\n\r\n\r\nfunction App() {\r\n\tconst [videos, setVideos] = useState<Array<Video>>([])\r\n\tconst [end, setEnd] = useState<boolean>(true)\r\n\tconst [autoplay, setAutoplay] = useState<boolean>(true)\r\n\tconst [loading, setLoading] = useState<boolean>(false)\r\n\tconst [playlistVideos, setPlaylistVideos] = useState<Array<Video | SuggestVideo>>([])\r\n\tconst [continuation, setContinuation] = useState<Continuation | null>(null)\r\n\tconst [current, setCurrent] = useState<number | null>(null)\r\n\tconst [searchTerm, setSearchTerm] = useState<string>('')\r\n\r\n\tconst onSearchTermChange = useCallback((evt) => {\r\n\t\tconst txt = evt.target.value\r\n\t\tsetSearchTerm(txt)\r\n\t}, [])\r\n\r\n\tconst onSearch = useCallback(async () => {\r\n\t\tsetLoading(true)\r\n\t\ttry {\r\n\t\t\tconst result = await api.search(searchTerm)\r\n\t\t\tif (result) {\r\n\t\t\t\tsetVideos(result.items.filter(i => i.type === 'video') as Video[])\r\n\t\t\t\tsetContinuation(result.continuation)\r\n\t\t\t} else {\r\n\t\t\t\tsetVideos([])\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log(err)\r\n\t\t}\r\n\t\tsetLoading(false)\r\n\t}, [searchTerm])\r\n\r\n\tconst addToPlaylist = useCallback((videoId: string) => {\r\n\t\tplaylist.add(videoId)\r\n\t\tsetPlaylistVideos(playlist.playlistVideos)\r\n\t}, [])\r\n\r\n\tconst addSuggestionToPlaylist = useCallback(async () => {\r\n\t\tconst suggestion = await playlist.suggest()\r\n\t\tif (suggestion) {\r\n\t\t\taddToPlaylist(suggestion)\r\n\t\t}\r\n\t}, [addToPlaylist])\r\n\r\n\tuseEffect(() => {\r\n\t\t//for autoplaying next video\r\n\t\tif (end && autoplay && playlistVideos.length > 0) {\r\n\t\t\tconst next = playlist.next()\r\n\t\t\tif (next === undefined) {\r\n\t\t\t\taddSuggestionToPlaylist()\r\n\t\t\t} else {\r\n\t\t\t\tsetCurrent(next)\r\n\t\t\t}\r\n\t\t}\r\n\t}, [end, autoplay, playlistVideos, addSuggestionToPlaylist])\r\n\r\n\tconst onVideoEnd = useCallback(() => {\r\n\t\tsetEnd(true)\r\n\t}, [])\r\n\r\n\tconst onVideoStart = useCallback(() => {\r\n\t\tsetEnd(false)\r\n\t}, [])\r\n\r\n\tconst playVideo = useCallback((id: number) => {\r\n\t\tplaylist.current = id\r\n\t\tsetCurrent(id)\r\n\t}, [])\r\n\r\n\tconst addToPlaylistThenPlay = useCallback((videoId: string) => {\r\n\t\taddToPlaylist(videoId)\r\n\t\tplaylist.setCurByVid(videoId)\r\n\t\tsetCurrent(playlist.current)\r\n\t\tsetEnd(false)\r\n\t}, [addToPlaylist])\r\n\r\n\tconst loadMoreSearchResult = useCallback(async () => {\r\n\t\tif (continuation === null) return\r\n\t\tconst result = await api.searchContinue(continuation)\r\n\t\tif (result) {\r\n\t\t\tconst newVideos = result.items.filter(i => i.type === 'video') as Video[]\r\n\t\t\tsetVideos(videos.concat(newVideos))\r\n\t\t\tsetContinuation(result.continuation)\r\n\t\t}\r\n\t}, [continuation, videos])\r\n\treturn (\r\n\t\t<playlistActionContext.Provider value={{addToPlaylist, playVideo, addToPlaylistThenPlay}}>\r\n\t\t<videoListenerContext.Provider value={{onVideoEnd, onVideoStart}}>\r\n\t\t<videoContext.Provider value={{videos}}>\r\n\t\t<autoplayContext.Provider value={{autoplay, setAutoplay}}>\r\n\t\t<ThemeProvider theme={theme}>\r\n\t\t\t<div className='background'>\r\n\t\t\t\t<SearchBar onChange={onSearchTermChange} onSubmit={onSearch} />\r\n\t\t\t\t{loading ?\r\n\t\t\t\t\t<LinearProgress /> :\r\n\t\t\t\t\t<VideoList\r\n\t\t\t\t\t\tclassName={'video-list'}\r\n\t\t\t\t\t\tspaceBottom\r\n\t\t\t\t\t\tloadVideos={loadMoreSearchResult}/>}\r\n\t\t\t\t{current !== null && <PlaylistRenderer\r\n\t\t\t\t\tplaylistVideos={playlistVideos}\r\n\t\t\t\t\tcurrentIndex={current}/>}\r\n\t\t\t</div>\r\n\t\t</ThemeProvider>\r\n\t\t</autoplayContext.Provider>\r\n\t\t</videoContext.Provider>\r\n\t\t</videoListenerContext.Provider>\r\n\t\t</playlistActionContext.Provider>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}