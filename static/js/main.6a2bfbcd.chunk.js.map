{"version":3,"sources":["utils/index.ts","constants/index.ts","services/API.ts","services/Playlist.ts","services/AudioManager.ts","context/index.ts","components/VideoListItem.tsx","components/VideoList.tsx","components/SearchBar.tsx","components/Player.tsx","components/PlaylistRenderer.tsx","components/ChannelHeader.tsx","hooks/useVideos.ts","App.tsx","reportWebVitals.js","index.js"],"names":["zeroPad","num","places","String","padStart","durationToSeconds","duration","numbers","split","result","base","i","length","parseInt","openLink","link","a","document","createElement","href","target","rel","click","sleep","time","Promise","res","_","setTimeout","URL","theme","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","api","url","cache","suggestionsCache","this","videoId","fetch","json","forEach","v","id","searchTerm","formatSearchTearm","encodeURIComponent","replace","items","type","continuation","method","headers","body","JSON","stringify","playlist","item","videoIds","current","add","bind","next","indexOf","push","map","getInfo","vid","newCur","suggest","suggestions","suggestion","audioManager","audio","Audio","updateAudio","getAudioURL","src","originalSrc","mainScreenVideoContext","createContext","setVideosWithLoading","playlistActionContext","playVideo","addToPlaylist","addToPlaylistThenPlay","autoplayContext","autoplay","setAutoplay","videoListenerContext","onVideoEnd","onVideoStart","VideoListItem","video","playing","onAddClick","onPlayClick","onLaunchClick","title","author","thumbnail","bestThumbnail","useContext","onAddClickHandler","useCallback","onLaunchClickHandler","onPlayClickHandler","getChannelLoader","channelID","getYTPlaylist","videos","channel","setChannel","className","clsx","alt","loading","onClick","name","IconButton","color","VideoList","spaceBottom","loadVideos","children","useState","setLoading","onScroll","e","d","currentTarget","scrollHeight","offsetHeight","scrollTop","then","youtubeLink","getYoutubeLink","LinearProgress","style","height","SearchBar","onChange","onSubmit","input","setInput","inputMode","setInputMode","onKeyPress","evt","charCode","blur","handleInputChange","value","handleClear","handleBack","handleSearch","AppBar","position","Toolbar","edge","Input","placeholder","fullWidth","endAdornment","InputAdornment","aria-label","Typography","flex","Player","videoDetails","setPlaying","curVId","setCurVId","currentTime","setCurrentTime","errorMessage","setErrorMessage","useEffect","ontimeupdate","Math","ceil","onpause","onloadeddata","onloadstart","onplay","onended","playErrorHandler","err","message","retry","play","catch","handleClose","setupForNewVideo","download","getAudioDownloadLink","playOrPause","pause","onSliderChange","val","handleAutoplayBtn","floor","Slider","max","min","padding","CircularProgress","size","Tooltip","variant","noWrap","Snackbar","open","onClose","ClickAwayListenerProps","onClickAway","action","Button","PlaylistRenderer","playlistVideos","currentIndex","on","setOn","setSuggestions","currentVId","setCurrentVId","toggleExpand","getSuggestions","info","component","paddingTop","paddingBottom","ChannelHeader","channelInfo","bestAvatar","Avatar","NUMBER_OF_VIDEO_TO_LOAD","App","end","setEnd","setPlaylistVideos","setCurrent","setSearchTerm","setVideos","displayVideos","setDisplayVideos","count","setCount","setContinuation","slice","console","log","loadMoreSearchResults","searchContinue","newVideos","filter","newContinuation","loadMoreYTPlaylistVideos","getYTplaylistByContinuation","loadMoreVideos","loader","concat","useVideos","onSearchTermChange","txt","searchVideos","search","onSearch","addSuggestionToPlaylist","undefined","setCurByVid","Provider","ThemeProvider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6a2bfbcd.chunk.js","sourcesContent":["import {SuggestVideo} from '../types'\r\n\r\nexport const zeroPad = (num: number, places: number) => String(num).padStart(places, '0')\r\n\r\nexport const formatTime = (time: number) => {\r\n    time = Math.ceil(time)\r\n    return `${zeroPad(Math.floor(time/60), 2)}:${zeroPad(time%60, 2)}`\r\n}\r\n\r\nexport const durationToSeconds = (duration: string | null): number => {\r\n    if (duration === null) {\r\n        return 0\r\n    }\r\n    const numbers = duration.split(':')\r\n    let result: number = 0\r\n    let base = 1\r\n    for (let i = 0 ; i < numbers.length ; i++) {\r\n        result += parseInt(numbers[numbers.length - 1 - i])*base\r\n        base *= 60\r\n    }\r\n    return result\r\n}\r\n\r\nexport const isSuggestVideo = (obj: any): obj is SuggestVideo => {\r\n    return obj.thumbnail\r\n}\r\n\r\nexport const openLink = (link: string) => {\r\n    const a = document.createElement('a')\r\n    a.href = link\r\n    a.target = '_blank'\r\n    a.rel = 'no-referrer'\r\n    a.click()\r\n}\r\n\r\nexport const sleep = (time: number) => {\r\n    return new Promise((res, _) => setTimeout(res, time))\r\n}","import {createMuiTheme} from '@material-ui/core'\r\n\r\nexport const URL = 'https://zc374b33a-zb3ad4304-gtw.qovery.io'\r\n\r\nexport const theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            light: '#303030',\r\n            main: '#000',\r\n            dark: '#303030',\r\n            contrastText: '#ffa600',\r\n        },\r\n        secondary: {\r\n            light: '#fff',\r\n            main: '#ffa600',\r\n            dark: '#fff',\r\n            contrastText: '#fff',\r\n        }\r\n    }\r\n})","import {URL} from '../constants'\r\nimport { VideoCache, SuggestVideo, SuggestionsCache, Video } from '../types'\r\nimport { Result as SearchResult, Continuation, ContinueResult } from 'ytsr'\r\nimport { Result as PlaylistResult, Continuation as PlaylistContinuation, ContinueResult as PlaylistContinueResult} from 'ytpl'\r\n\r\nexport class API {\r\n    private url: string\r\n    private cache: VideoCache\r\n    private suggestionsCache: SuggestionsCache\r\n    constructor(url: string) {\r\n        this.url = url\r\n        this.cache = {}\r\n        this.suggestionsCache = {}\r\n    }\r\n    public getYoutubeLink(videoId: string): string {\r\n        return `https://youtu.be/${videoId}`\r\n    }\r\n    public getInfo(videoId: string): Video {\r\n        return this.cache[videoId]\r\n    }\r\n    public getAudioURL(videoId: string): string {\r\n        return `${this.url}/stream/v2?vid=${videoId}`\r\n    }\r\n    public getAudioDownloadLink(videoId: string): HTMLAnchorElement {\r\n        const a = document.createElement('a')\r\n        a.href = `${this.url}/download?vid=${videoId}`\r\n        a.target = '_blank'\r\n        return a\r\n    }\r\n    public async suggest(videoId: string): Promise<Array<SuggestVideo> | null> {\r\n        if (videoId in this.suggestionsCache) {\r\n            return this.suggestionsCache[videoId]\r\n        }\r\n        try {\r\n            const res = await fetch(`${URL}/suggest?vid=${videoId}`)\r\n            const result: SuggestVideo[] = await res.json()\r\n            result.forEach(v => {\r\n                if (!(v.id in this.cache)) {\r\n                    this.cache[v.id] = v\r\n                }\r\n            })\r\n            this.suggestionsCache[videoId] = result\r\n            return result\r\n        } catch (err) {\r\n            return null\r\n        }\r\n    }\r\n    public async search(searchTerm: string): Promise<SearchResult | null> {\r\n        const formatSearchTearm = encodeURIComponent(searchTerm.replace(' ', '+'))\r\n        try {\r\n            const res = await fetch(`${URL}/search?q=${formatSearchTearm}`)\r\n            const result: SearchResult = await res.json()\r\n            result.items.forEach(i => {\r\n                if (i.type === 'video') {\r\n                    this.cache[i.id] = i\r\n                }\r\n            })\r\n            return result\r\n        } catch (err) {\r\n            return null\r\n        }\r\n    }\r\n    public async searchContinue(continuation: Continuation): Promise<ContinueResult | null> {\r\n        try {\r\n            const res = await fetch(`${URL}/search`, {\r\n                method: 'post',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(continuation)\r\n            })\r\n            const result: SearchResult = await res.json()\r\n            result.items.forEach(i => {\r\n                if (i.type === 'video') {\r\n                    this.cache[i.id] = i\r\n                }\r\n            })\r\n            return result\r\n        } catch (err) {\r\n            return null\r\n        }\r\n    }\r\n    public async getYTPlaylist(id: string): Promise<PlaylistResult | null> {\r\n        try {\r\n            const res = await fetch(`${URL}/playlist?pid=${id}`)\r\n            const playlist: PlaylistResult = await res.json()\r\n            playlist.items.forEach(item => {\r\n                if (item.id in this.cache) return\r\n                this.cache[item.id] = item\r\n            })\r\n            return playlist\r\n        } catch (err) {\r\n            return null\r\n        }\r\n    }\r\n    public async getYTplaylistByContinuation(continuation: PlaylistContinuation): Promise<PlaylistContinueResult | null> {\r\n        try {\r\n            const res = await fetch(`${URL}/playlist`, {\r\n                method: 'post',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(continuation)\r\n            })\r\n            const playlist: PlaylistContinueResult = await res.json()\r\n            playlist.items.forEach(item => {\r\n                if (item.id in this.cache) return\r\n                this.cache[item.id] = item\r\n            })\r\n            return playlist\r\n        } catch (err) {\r\n            return null\r\n        }\r\n    }\r\n}\r\n\r\nexport const api = new API(URL);","import { Video } from '../types'\r\nimport {API, api} from './API'\r\n\r\nexport class Playlist {\r\n    private videoIds: Array<string>;\r\n    public current: number;\r\n    private api: API;\r\n    constructor(api: API, videoIds?: Array<string>) {\r\n        this.videoIds = videoIds ? videoIds : []\r\n        this.current = -1\r\n        this.api = api\r\n        this.add = this.add.bind(this)\r\n        this.next = this.next.bind(this)\r\n    }\r\n    add(videoId: string) {\r\n        if (this.videoIds.indexOf(videoId) === -1) {\r\n            this.videoIds.push(videoId)\r\n        }\r\n    }\r\n    get playlistVideos(): Array<Video> {\r\n        return this.videoIds.map(id => this.api.getInfo(id))\r\n    }\r\n    setCurByVid(vid: string): number | void {\r\n        const newCur = this.videoIds.indexOf(vid)\r\n        if (newCur !== -1) {\r\n            this.current = newCur\r\n            return this.current\r\n        }\r\n    }\r\n    next(): number | void {\r\n        if (this.current < this.videoIds.length - 1) {\r\n            this.current += 1\r\n            return this.current\r\n        }\r\n    }\r\n    // return a suggested video id that is not in the playlist\r\n    public async suggest(): Promise<string | void> {\r\n        const videoId = this.videoIds[this.current]\r\n        const suggestions = await this.api.suggest(videoId)\r\n        if (suggestions) {\r\n            for (let suggestion of suggestions) {\r\n                const isNotInPlaylist = this.videoIds.indexOf(suggestion.id) === -1\r\n                if (isNotInPlaylist) {\r\n                    return suggestion.id\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const playlist = new Playlist(api)","import {API, api} from './API'\r\n\r\nexport class AudioManager {\r\n    public audio: HTMLAudioElement\r\n    private vid?: string;\r\n    private api: API\r\n    constructor(api: API, vid?: string) {\r\n        this.api = api\r\n        this.audio = new Audio()\r\n        if (vid) {\r\n            this.updateAudio(vid)\r\n        }\r\n    }\r\n\r\n    public updateAudio(vid: string): void {\r\n        if (vid === this.vid) return\r\n        this.vid = vid\r\n        const url = this.api.getAudioURL(vid)\r\n        this.audio.src = url\r\n    }\r\n\r\n    public retry(): void {\r\n        const originalSrc = this.audio.src\r\n        this.audio.src = ''\r\n        this.audio.src = originalSrc\r\n    }\r\n}\r\n\r\nexport const audioManager = new AudioManager(api);","import { createContext } from 'react'\r\nimport { VideoLoader } from '../types'\r\n\r\nexport const mainScreenVideoContext = createContext<{\r\n    setVideosWithLoading: (loadVideos: VideoLoader) => Promise<void>\r\n}>({\r\n    setVideosWithLoading: async () => {}\r\n})\r\n\r\nexport const playlistActionContext = createContext<{\r\n    playVideo: (index: number) => void,\r\n    addToPlaylist: (videoId: string) => void,\r\n    addToPlaylistThenPlay: (videoId: string) => void\r\n}>({\r\n    playVideo: () => { },\r\n    addToPlaylist: () => { },\r\n    addToPlaylistThenPlay: () => { }\r\n})\r\n\r\nexport const autoplayContext = createContext<{ autoplay: boolean, setAutoplay: (on: boolean) => void }>({\r\n    autoplay: true,\r\n    setAutoplay: () => { }\r\n})\r\n\r\nexport const videoListenerContext = createContext<{ onVideoEnd: () => void, onVideoStart: () => void }>({\r\n    onVideoEnd: () => { },\r\n    onVideoStart: () => { },\r\n})","import React, { useCallback, useContext } from 'react'\r\nimport { Video } from '../types'\r\nimport { isSuggestVideo } from '../utils'\r\nimport { api } from '../services'\r\nimport { IconButton } from '@material-ui/core'\r\nimport { mainScreenVideoContext } from '../context'\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline'\r\nimport LaunchIcon from '@material-ui/icons/Launch'\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline'\r\nimport clsx from 'clsx'\r\nimport './VideoListItem.css'\r\n\r\ninterface Props {\r\n    video: Video;\r\n    playing?: boolean;\r\n    onAddClick?: (vid: string) => void;\r\n    onPlayClick?: (vid: string) => void;\r\n    onLaunchClick?: (vid: string) => void;\r\n}\r\n\r\nconst VideoListItem = ({ video, playing, onAddClick, onPlayClick, onLaunchClick }: Props) => {\r\n    const {title, author} = video\r\n    const thumbnail = isSuggestVideo(video) ? video.thumbnail.url : video.bestThumbnail.url\r\n    const {setVideosWithLoading} = useContext(mainScreenVideoContext)\r\n\r\n    const onAddClickHandler = useCallback(() => {\r\n        if (onAddClick) {\r\n            onAddClick(video.id)\r\n        }\r\n    }, [video, onAddClick])\r\n\r\n    const onLaunchClickHandler = useCallback(() => {\r\n        if (onLaunchClick) {\r\n            onLaunchClick(video.id)\r\n        }\r\n    }, [video, onLaunchClick])\r\n\r\n    const onPlayClickHandler = useCallback(() => {\r\n        if (onPlayClick) {\r\n            onPlayClick(video.id)\r\n        }\r\n    }, [video, onPlayClick])\r\n\r\n    const getChannelLoader = useCallback((channelID: string) => async () => {\r\n        const result = await api.getYTPlaylist(channelID)\r\n        const videos = result ? result.items : []\r\n        const continuation = result?.continuation\r\n        const channel = result?.author\r\n        return {videos, continuation, channel}\r\n    }, [])\r\n\r\n    const setChannel = useCallback(() => {\r\n        if (video.author) {\r\n            setVideosWithLoading(getChannelLoader(video.author.channelID))\r\n        }\r\n    }, [setVideosWithLoading, getChannelLoader, video])\r\n\r\n    return (\r\n        <div className={clsx('video-list-item-container', {playing})}>\r\n            {thumbnail && <img\r\n                src={thumbnail}\r\n                className='video-list-item-thumbnail'\r\n                alt='thumbnail'\r\n                loading='lazy'\r\n            />}\r\n            <div className='video-list-item-content'>\r\n                <div className='video-list-item-title single-line'>\r\n                    {title}\r\n                </div>\r\n                <div className='video-list-item-subtitle single-line' onClick={setChannel}>\r\n                    {author?.name}\r\n                </div>\r\n                <div className='video-list-item-row tools'>\r\n                    {!playing && onPlayClick && <IconButton onClick={onPlayClickHandler} color='secondary'>\r\n                        <PlayCircleOutlineIcon/>\r\n                    </IconButton>}\r\n                    {onAddClick && <IconButton onClick={onAddClickHandler} color='secondary'>\r\n                        <AddCircleOutlineIcon/>\r\n                    </IconButton>}\r\n                    {onLaunchClick && <IconButton onClick={onLaunchClickHandler} color='secondary'>\r\n                        <LaunchIcon/>\r\n                    </IconButton>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoListItem","import React, { useCallback, useState, useContext } from 'react'\r\nimport VideoListItem from './VideoListItem'\r\nimport { LinearProgress } from '@material-ui/core'\r\nimport { api } from '../services'\r\nimport { openLink } from '../utils'\r\nimport { playlistActionContext } from '../context'\r\nimport { Video } from '../types'\r\n\r\ninterface Props{\r\n    loadVideos?: () => Promise<void>;\r\n    className?: string;\r\n    spaceBottom?: boolean;\r\n    videos: Array<Video>;\r\n    children?: JSX.Element;\r\n}\r\n\r\nconst VideoList = ({className, spaceBottom, loadVideos, videos, children}: Props) => {\r\n    const [loading, setLoading] = useState<boolean>(false)\r\n    const {addToPlaylist, addToPlaylistThenPlay} = useContext(playlistActionContext)\r\n    const onScroll: React.UIEventHandler<HTMLDivElement> = useCallback((e) => {\r\n        const d = e.currentTarget\r\n        if (loadVideos && !loading && d.scrollHeight - d.offsetHeight - d.scrollTop < 2) {\r\n            setLoading(true)\r\n            loadVideos().then(() => setLoading(false))\r\n        }\r\n    }, [loadVideos, loading])\r\n\r\n    const onAddClick = useCallback((videoId: string) => {\r\n        addToPlaylist(videoId)\r\n    }, [addToPlaylist])\r\n\r\n    const onLaunchClick = useCallback((videoId: string) => {\r\n        const youtubeLink = api.getYoutubeLink(videoId)\r\n        openLink(youtubeLink)\r\n    }, [])\r\n\r\n    const onPlayClick = useCallback((videoId: string) => {\r\n        addToPlaylistThenPlay(videoId)\r\n    }, [addToPlaylistThenPlay])\r\n    \r\n    return (\r\n    <div \r\n    className={className}\r\n    onScroll={onScroll}>\r\n        {children}\r\n        {videos.map(v =>\r\n            <VideoListItem\r\n                video={v}\r\n                key={v.id}\r\n                onAddClick={onAddClick}\r\n                onPlayClick={onPlayClick}\r\n                onLaunchClick={onLaunchClick}/>)}\r\n        {loading && <LinearProgress/>}\r\n        {spaceBottom && <div style={{height: 100}}/>}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default VideoList","import React, { useCallback, useState } from 'react'\r\nimport { Input, AppBar, Toolbar, InputAdornment, IconButton, Typography } from '@material-ui/core'\r\nimport ClearIcon from '@material-ui/icons/Clear'\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport './SearchBar.css'\r\n\r\ninterface Props{\r\n    onChange: (evt: any) => void;\r\n    onSubmit: () => void;\r\n}\r\n\r\nconst SearchBar = ({ onChange, onSubmit }: Props) => {\r\n    const [input, setInput] = useState<string>('')\r\n    const [inputMode, setInputMode] = useState<boolean>(false)\r\n\r\n    const onKeyPress = useCallback(evt => {\r\n        if (evt.charCode === 13) {\r\n            onSubmit()\r\n            evt.target.blur()\r\n        }\r\n    }, [onSubmit])\r\n\r\n    const handleInputChange = useCallback(evt => {\r\n        setInput(evt.target.value)\r\n        onChange(evt)\r\n    }, [onChange])\r\n\r\n    const handleClear = useCallback(() => {\r\n        setInput('')\r\n    }, [])\r\n\r\n    const handleBack = useCallback(() => {\r\n        setInputMode(false)\r\n    }, [])\r\n\r\n    const handleSearch = useCallback(() => {\r\n        setInputMode(true)\r\n    }, [])\r\n    return (\r\n            <AppBar position='static'>\r\n                {inputMode ?\r\n                <Toolbar>\r\n                    <IconButton color='secondary' edge=\"start\" onClick={handleBack}>\r\n                        <ArrowBackIosIcon/>\r\n                    </IconButton>\r\n                    <Input\r\n                        color='secondary'\r\n                        style={{color: 'white'}}\r\n                        placeholder=\"Search\"\r\n                        value={input}\r\n                        onChange={handleInputChange}\r\n                        onKeyPress={onKeyPress}\r\n                        fullWidth\r\n                        endAdornment={\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                aria-label=\"clear input\"\r\n                                color='secondary'\r\n                                onClick={handleClear}>\r\n                                    <ClearIcon/>\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        }/>\r\n                </Toolbar> : \r\n                <Toolbar>\r\n                    <Typography style={{flex: 1}}>YT Audio</Typography>\r\n                    <IconButton color='secondary' onClick={handleSearch}>\r\n                        <SearchIcon/>\r\n                    </IconButton>\r\n                </Toolbar>}\r\n            </AppBar>)\r\n}\r\n\r\nexport default SearchBar","import React, { useCallback, useEffect, useState, useContext } from 'react'\r\nimport { Slider, IconButton, Typography, Tooltip, CircularProgress, Snackbar, Button } from '@material-ui/core'\r\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled'\r\nimport PauseCircleFilledIcon from '@material-ui/icons/PauseCircleFilled'\r\nimport { formatTime, durationToSeconds } from '../utils'\r\nimport { api, audioManager } from '../services'\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow'\r\nimport PauseIcon from '@material-ui/icons/Pause'\r\nimport DownloadIcon from '@material-ui/icons/GetApp'\r\nimport { Video } from '../types'\r\nimport { autoplayContext, videoListenerContext } from '../context'\r\nimport './Player.css'\r\n\r\n\r\ninterface Props {\r\n    videoDetails: Video;\r\n}\r\n\r\nconst Player = ({ videoDetails }: Props) => {\r\n    const [playing, setPlaying] = useState<boolean>(false)\r\n    const [curVId, setCurVId] = useState<string | null>(null)\r\n    const [loading, setLoading] = useState<boolean>(false)\r\n    const [currentTime, setCurrentTime] = useState<number>(0)\r\n    const [errorMessage, setErrorMessage] = useState<string>('')\r\n    const {autoplay, setAutoplay} = useContext(autoplayContext)\r\n    const {onVideoEnd, onVideoStart} = useContext(videoListenerContext)\r\n\r\n    useEffect(() => {\r\n        audioManager.audio.ontimeupdate = () => setCurrentTime(Math.ceil(audioManager.audio.currentTime))\r\n        audioManager.audio.onpause = () => setPlaying(false)\r\n        audioManager.audio.onloadeddata = () => setLoading(false)\r\n        audioManager.audio.onloadstart = () => setLoading(true)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        audioManager.audio.onplay = () => {\r\n            setPlaying(true)\r\n            setErrorMessage('')\r\n            if (onVideoStart) {\r\n                onVideoStart()\r\n            }\r\n        }\r\n        audioManager.audio.onended = () => {\r\n            setPlaying(false)\r\n            if (onVideoEnd) {\r\n                onVideoEnd()\r\n            }\r\n        }\r\n    }, [onVideoStart, onVideoEnd])\r\n\r\n    const playErrorHandler = useCallback((err) => {\r\n        const isAborted = err.message.indexOf(\"aborted by the user agent\") !== -1\r\n        if (!isAborted) {\r\n            setLoading(false)\r\n            setErrorMessage(\"Failed to play the video\")\r\n        }\r\n    }, [])\r\n\r\n    const retry = useCallback(() => {\r\n        audioManager.retry()\r\n        audioManager.audio.play().catch(playErrorHandler)\r\n    }, [playErrorHandler])\r\n\r\n    const handleClose = useCallback(() => {\r\n        setErrorMessage('')\r\n    }, [])\r\n\r\n    const setupForNewVideo = useCallback((videoDetails: Video) => {\r\n        setCurVId(videoDetails.id)\r\n        audioManager.updateAudio(videoDetails.id)\r\n        setCurrentTime(0)\r\n        if (autoplay) {\r\n            audioManager.audio.play().catch(playErrorHandler)\r\n        }\r\n    }, [autoplay, playErrorHandler])\r\n\r\n    useEffect(() => {\r\n        if (curVId !== videoDetails.id) {\r\n            setupForNewVideo(videoDetails)\r\n        }\r\n    }, [setupForNewVideo, curVId, videoDetails])\r\n\r\n    const download = useCallback(() => {\r\n        const a = api.getAudioDownloadLink(videoDetails.id)\r\n        a.click()\r\n    }, [videoDetails])\r\n\r\n    const playOrPause = useCallback(() => {\r\n        if (playing) {\r\n            audioManager.audio.pause()\r\n        } else {\r\n            audioManager.audio.play()\r\n        }\r\n    }, [playing])\r\n\r\n    const onSliderChange = useCallback((_, val) => {\r\n        audioManager.audio.currentTime = val\r\n    }, [])\r\n\r\n    const handleAutoplayBtn = useCallback(() => {\r\n        setAutoplay(!autoplay)\r\n    }, [autoplay, setAutoplay])\r\n\r\n    return (\r\n        <div className='player-container'>\r\n            <div className='player-progress-container'>\r\n                <span className='player-current-time'>{formatTime(currentTime)}</span>\r\n                <Slider color='secondary' onChange={onSliderChange} max={durationToSeconds(videoDetails.duration)} min={0} value={currentTime} />\r\n                <span className='player-end-time'>{videoDetails.duration}</span>\r\n            </div>\r\n            <div className='player-bottom-container'>\r\n                {loading ? <div style={{ padding: 12 }}><CircularProgress color='secondary' size={22} /></div> :\r\n                    <IconButton onClick={playOrPause} color='secondary'>\r\n                        {playing ? <PauseIcon /> : <PlayArrowIcon />}\r\n                    </IconButton>}\r\n                <IconButton onClick={download} color='secondary'>\r\n                    <DownloadIcon />\r\n                </IconButton>\r\n                <Tooltip title=\"autoplay\">\r\n                    <IconButton onClick={handleAutoplayBtn} color='secondary'>\r\n                        {autoplay ? <PauseCircleFilledIcon /> : <PlayCircleFilledIcon />}\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <div className='player-details-container'>\r\n                    <Typography variant=\"subtitle1\" noWrap>{videoDetails.title}</Typography>\r\n                    <Typography variant=\"subtitle2\" style={{ color: 'silver' }} noWrap>{videoDetails.author?.name}</Typography>\r\n                </div>\r\n            </div>\r\n            <Snackbar\r\n                open={errorMessage !== ''}\r\n                onClose={handleClose}\r\n                message={errorMessage}\r\n                color=\"secondary\"\r\n                ClickAwayListenerProps={{onClickAway: () => {}}}\r\n                action={\r\n                    <Button color=\"secondary\" size=\"small\" onClick={retry}>\r\n                        Retry\r\n                    </Button>\r\n                }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Player","import React, { useState, useCallback, useEffect, useContext } from \"react\"\r\nimport clsx from 'clsx'\r\nimport './PlaylistRenderer.css'\r\nimport {IconButton, LinearProgress, Typography} from '@material-ui/core'\r\nimport Up from '@material-ui/icons/ExpandLess'\r\nimport Down from '@material-ui/icons/ExpandMore'\r\nimport Player from './Player'\r\nimport VideoList from './VideoList'\r\nimport VideoListItem from \"./VideoListItem\"\r\nimport {Video, SuggestVideo} from '../types'\r\nimport {api} from '../services'\r\nimport { openLink } from \"../utils\"\r\nimport {playlistActionContext} from '../context'\r\n\r\ninterface Props {\r\n    playlistVideos: Array<Video>;\r\n    currentIndex: number;\r\n}\r\n\r\nconst PlaylistRenderer = ({playlistVideos, currentIndex}: Props) => {\r\n    const [on, setOn] = useState<boolean>(false)\r\n    const [suggestions, setSuggestions] = useState<SuggestVideo[]>([])\r\n    const [loading, setLoading] = useState<boolean>(false)\r\n    const [currentVId, setCurrentVId] = useState<string | null>(null)\r\n    const {playVideo} = useContext(playlistActionContext)\r\n\r\n    const toggleExpand = useCallback(() => {\r\n        setOn(!on)\r\n    }, [on])\r\n\r\n    const getSuggestions = useCallback(async (vid: string) => {\r\n        setLoading(true)\r\n        const res = await api.suggest(vid)\r\n        if (res) {\r\n            setSuggestions(res)\r\n        } else {\r\n            setSuggestions([])\r\n        }\r\n        setLoading(false)\r\n    }, [])\r\n\r\n    const onLaunchClick = useCallback((videoId: string) => {\r\n        const youtubeLink = api.getYoutubeLink(videoId)\r\n        openLink(youtubeLink)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (currentVId) {\r\n            getSuggestions(currentVId)\r\n        }\r\n    }, [currentVId, getSuggestions])\r\n\r\n    useEffect(() => {\r\n        setCurrentVId(playlistVideos[currentIndex]?.id)\r\n    }, [currentIndex, playlistVideos])\r\n\r\n    return (\r\n        <div className={clsx('playlist', {open: on})}>\r\n            <div className='top-section'>\r\n                <div className='player-container'>\r\n                {currentIndex >= playlistVideos.length?\r\n                    <LinearProgress/> :\r\n                    <Player videoDetails={playlistVideos[currentIndex]}/>}\r\n                </div>\r\n                <IconButton onClick={toggleExpand} color='secondary'>\r\n                    {on ? <Down/> : <Up/>}\r\n                </IconButton>\r\n            </div>\r\n            <div className='lists-container'>\r\n            <div className={clsx('list')}>\r\n                {playlistVideos\r\n                    .map((info, id) =>\r\n                        <VideoListItem\r\n                            key={`playlist${id}`}\r\n                            video={info}\r\n                            onPlayClick={() => playVideo(id)}\r\n                            onLaunchClick={onLaunchClick}\r\n                            playing={id === currentIndex}/>)}\r\n            </div>\r\n            <Typography className={clsx('divider')} variant='h5' component='h5'>Suggested</Typography>\r\n            {loading ?\r\n                <div style={{paddingTop: 30, paddingBottom: 30}}><LinearProgress/></div> :\r\n                <VideoList videos={suggestions} className={clsx('list')}/>\r\n            }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlaylistRenderer","import React from 'react'\r\nimport { ChannelInfo } from '../types'\r\nimport { Avatar } from '@material-ui/core'\r\nimport './ChannelHeader.css'\r\n\r\ninterface Props {\r\n    channelInfo: ChannelInfo\r\n}\r\n\r\nconst ChannelHeader = ({ channelInfo }: Props) => {\r\n    return (\r\n        <div className='channel-header-container'>\r\n            {channelInfo.bestAvatar.url ?\r\n                <Avatar className='avatar' alt={channelInfo.name} src={channelInfo.bestAvatar.url}/> :\r\n                <Avatar className='avatar'>{channelInfo.name[0]}</Avatar>}\r\n            <span className='name'>{channelInfo.name}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChannelHeader","import { useState, useCallback, useEffect } from \"react\"\r\nimport { Continuation as SearchContinuation} from 'ytsr'\r\nimport { Continuation as YTPlaylistContinuation } from 'ytpl'\r\nimport { ChannelInfo, Video, VideoLoader } from '../types'\r\nimport { api } from '../services'\r\nimport { sleep } from '../utils'\r\n\r\nconst NUMBER_OF_VIDEO_TO_LOAD = 15\r\n\r\nexport function useVideos() {\r\n\tconst [channel, setChannel] = useState<ChannelInfo | undefined>()\r\n\tconst [videos, setVideos] = useState<Array<Video>>([])\r\n    const [displayVideos, setDisplayVideos] = useState<Array<Video>>([])\r\n\tconst [count, setCount] = useState<number>(NUMBER_OF_VIDEO_TO_LOAD)\r\n    const [continuation, setContinuation] = useState<SearchContinuation | YTPlaylistContinuation | undefined | null>()\r\n\tconst [loading, setLoading] = useState<boolean>(false)\r\n    useEffect(() => {\r\n        setDisplayVideos(videos.slice(0, count))\r\n    }, [videos, count])\r\n\tconst setVideosWithLoading = useCallback(async (loadVideos: VideoLoader) => {\r\n\t\tif (!loading) {\r\n\t\t\tsetLoading(true)\r\n\t\t\ttry {\r\n\t\t\t\tconst {videos, continuation, channel} = await loadVideos()\r\n\t\t\t\tsetVideos(videos)\r\n\t\t\t\tsetContinuation(continuation)\r\n\t\t\t\tsetChannel(channel)\r\n                setCount(NUMBER_OF_VIDEO_TO_LOAD)\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.log(err)\r\n\t\t\t}\r\n\t\t\tsetLoading(false)\r\n\t\t}\r\n\t}, [loading])\r\n\tconst loadMoreSearchResults = useCallback(async (continuation: SearchContinuation) => {\r\n\t\tconst result = await api.searchContinue(continuation)\r\n\t\tif (result) {\r\n\t\t\tconst newVideos = result.items.filter(i => i.type === 'video') as Video[]\r\n\t\t\treturn {newVideos, newContinuation: result.continuation}\r\n\t\t}\r\n\t}, [])\r\n\tconst loadMoreYTPlaylistVideos = useCallback(async (continuation: YTPlaylistContinuation) => {\r\n\t\tconst result = await api.getYTplaylistByContinuation(continuation)\r\n\t\tif (result) {\r\n\t\t\tconst newVideos = result.items as Video[]\r\n\t\t\treturn {newVideos, newContinuation: result.continuation}\r\n\t\t}\r\n\t}, [])\r\n\tconst loadMoreVideos = useCallback(async () => {\r\n        if (videos.length - count >= NUMBER_OF_VIDEO_TO_LOAD) {\r\n            await sleep(500)\r\n            return setCount(count + NUMBER_OF_VIDEO_TO_LOAD)\r\n        }\r\n\t\tif (!continuation) {\r\n            if (videos.length > count) return setCount(count + NUMBER_OF_VIDEO_TO_LOAD)\r\n            return\r\n        }\r\n\t\tconst loader = channel ? loadMoreYTPlaylistVideos : loadMoreSearchResults\r\n\t\tconst result = await loader(continuation)\r\n\t\tif (result) {\r\n\t\t\tconst newVideos = videos.concat(result.newVideos)\r\n            if (videos.length > count)  setCount(count + NUMBER_OF_VIDEO_TO_LOAD)\r\n            setVideos(newVideos)\r\n\t\t\tsetContinuation(result.newContinuation)\r\n\t\t}\r\n\t\t\r\n\t}, [continuation, videos, channel, count, loadMoreSearchResults, loadMoreYTPlaylistVideos])\r\n\r\n\treturn {videos: displayVideos, channel, loading, setVideosWithLoading, loadMoreVideos}\r\n}","import './App.css';\r\nimport { useState, useCallback, useEffect } from 'react'\r\nimport VideoList from './components/VideoList'\r\nimport SearchBar from './components/SearchBar'\r\nimport PlaylistRenderer from './components/PlaylistRenderer'\r\nimport { theme } from './constants'\r\nimport { api, playlist } from './services'\r\nimport { LinearProgress, ThemeProvider } from '@material-ui/core'\r\nimport { Video } from './types';\r\nimport { mainScreenVideoContext, autoplayContext, videoListenerContext, playlistActionContext } from './context'\r\nimport ChannelHeader from './components/ChannelHeader'\r\nimport { useVideos } from './hooks'\r\n\r\nfunction App() {\r\n\tconst [end, setEnd] = useState<boolean>(true)\r\n\tconst [autoplay, setAutoplay] = useState<boolean>(true)\r\n\tconst [playlistVideos, setPlaylistVideos] = useState<Array<Video>>([])\r\n\tconst [current, setCurrent] = useState<number | null>(null)\r\n\tconst [searchTerm, setSearchTerm] = useState<string>('')\r\n\tconst {videos, channel, loading, setVideosWithLoading, loadMoreVideos} = useVideos()\r\n\r\n\tconst onSearchTermChange = useCallback((evt) => {\r\n\t\tconst txt = evt.target.value\r\n\t\tsetSearchTerm(txt)\r\n\t}, [])\r\n\r\n\tconst searchVideos = useCallback(async () => {\r\n\t\tconst result = await api.search(searchTerm)\r\n\t\tconst videos = result?.items.filter(i => i.type === 'video') as Video[]\r\n\t\tconst continuation = result?.continuation\r\n\t\treturn {videos, continuation}\r\n\t}, [searchTerm])\r\n\r\n\tconst onSearch = useCallback(async () => {\r\n\t\tsetVideosWithLoading(searchVideos)\r\n\t}, [setVideosWithLoading, searchVideos])\r\n\r\n\tconst addToPlaylist = useCallback((videoId: string) => {\r\n\t\tplaylist.add(videoId)\r\n\t\tsetPlaylistVideos(playlist.playlistVideos)\r\n\t}, [])\r\n\r\n\tconst addSuggestionToPlaylist = useCallback(async () => {\r\n\t\tconst suggestion = await playlist.suggest()\r\n\t\tif (suggestion) {\r\n\t\t\taddToPlaylist(suggestion)\r\n\t\t}\r\n\t}, [addToPlaylist])\r\n\r\n\tuseEffect(() => {\r\n\t\t//for autoplaying next video\r\n\t\tif (end && autoplay && playlistVideos.length > 0) {\r\n\t\t\tconst next = playlist.next()\r\n\t\t\tif (next === undefined) {\r\n\t\t\t\taddSuggestionToPlaylist()\r\n\t\t\t} else {\r\n\t\t\t\tsetCurrent(next)\r\n\t\t\t}\r\n\t\t}\r\n\t}, [end, autoplay, playlistVideos, addSuggestionToPlaylist])\r\n\r\n\tconst onVideoEnd = useCallback(() => {\r\n\t\tsetEnd(true)\r\n\t}, [])\r\n\r\n\tconst onVideoStart = useCallback(() => {\r\n\t\tsetEnd(false)\r\n\t}, [])\r\n\r\n\tconst playVideo = useCallback((id: number) => {\r\n\t\tplaylist.current = id\r\n\t\tsetCurrent(id)\r\n\t}, [])\r\n\r\n\tconst addToPlaylistThenPlay = useCallback((videoId: string) => {\r\n\t\taddToPlaylist(videoId)\r\n\t\tplaylist.setCurByVid(videoId)\r\n\t\tsetCurrent(playlist.current)\r\n\t\tsetEnd(false)\r\n\t}, [addToPlaylist])\r\n\t\r\n\treturn (\r\n\t\t<mainScreenVideoContext.Provider value={{setVideosWithLoading}}>\r\n\t\t<playlistActionContext.Provider value={{addToPlaylist, playVideo, addToPlaylistThenPlay}}>\r\n\t\t<videoListenerContext.Provider value={{onVideoEnd, onVideoStart}}>\r\n\t\t<autoplayContext.Provider value={{autoplay, setAutoplay}}>\r\n\t\t<ThemeProvider theme={theme}>\r\n\t\t\t<div className='background'>\r\n\t\t\t\t<SearchBar onChange={onSearchTermChange} onSubmit={onSearch} />\r\n\t\t\t\t{loading ?\r\n\t\t\t\t\t<LinearProgress /> :\r\n\t\t\t\t\t<VideoList\r\n\t\t\t\t\t\tclassName={'video-list'}\r\n\t\t\t\t\t\tspaceBottom\r\n\t\t\t\t\t\tvideos={videos}\r\n\t\t\t\t\t\tloadVideos={loadMoreVideos}>\r\n\t\t\t\t\t\t\t{channel && <ChannelHeader channelInfo={channel}/>}\r\n\t\t\t\t\t</VideoList>}\r\n\t\t\t\t{current !== null && <PlaylistRenderer\r\n\t\t\t\t\tplaylistVideos={playlistVideos}\r\n\t\t\t\t\tcurrentIndex={current}/>}\r\n\t\t\t</div>\r\n\t\t</ThemeProvider>\r\n\t\t</autoplayContext.Provider>\r\n\t\t</videoListenerContext.Provider>\r\n\t\t</playlistActionContext.Provider>\r\n\t\t</mainScreenVideoContext.Provider>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}