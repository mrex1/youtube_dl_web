{"version":3,"sources":["utils/index.ts","constants/index.ts","services/API.ts","services/Playlist.ts","services/AudioManager.ts","context/index.ts","components/Thumbnail.tsx","components/VideoListItem.tsx","components/VideoList.tsx","components/SearchBar.tsx","components/Player.tsx","components/PlaylistRenderer.tsx","components/ChannelHeader.tsx","hooks/useVideos.ts","App.tsx","reportWebVitals.js","index.js"],"names":["zeroPad","num","places","String","padStart","durationToSeconds","duration","numbers","split","result","base","i","length","parseInt","roundViews","views","unit","toFixed","formatViews","billion","million","sleep","time","Promise","res","_","setTimeout","URL","theme","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","API","url","cache","suggestionsCache","this","videoId","a","document","createElement","href","target","fetch","json","forEach","v","id","searchTerm","formatSearchTearm","encodeURIComponent","replace","items","type","continuation","method","headers","body","JSON","stringify","playlist","item","api","Playlist","videoIds","current","add","bind","next","indexOf","push","map","getInfo","vid","newCur","suggest","suggestions","suggestion","audioManager","audio","Audio","updateAudio","getAudioURL","src","originalSrc","mainScreenVideoContext","createContext","setVideosWithLoading","playlistActionContext","playVideo","addToPlaylist","addToPlaylistThenPlay","autoplayContext","autoplay","setAutoplay","videoListenerContext","onVideoEnd","onVideoStart","Thumbnail","thumbnailUrl","className","alt","loading","VideoListItem","video","playing","onAddClick","onPlayClick","onDownloadClick","title","author","thumbnail","bestThumbnail","obj","isSearchVideo","useContext","onAddClickHandler","useCallback","onDownloadClickHandler","onPlayClickHandler","getChannelLoader","channelID","getYTPlaylist","videos","channel","setChannel","clsx","onClick","name","IconButton","color","VideoList","spaceBottom","loadVideos","children","useState","setLoading","onScroll","e","d","currentTarget","scrollHeight","offsetHeight","scrollTop","then","getAudioDownloadLink","click","LinearProgress","style","height","SearchBar","onChange","onSubmit","input","setInput","inputMode","setInputMode","onKeyPress","evt","charCode","blur","handleInputChange","value","handleClear","handleBack","handleSearch","AppBar","position","Toolbar","edge","Input","placeholder","fullWidth","endAdornment","InputAdornment","Typography","flex","Player","videoDetails","setPlaying","curVId","setCurVId","currentTime","setCurrentTime","errorMessage","setErrorMessage","useEffect","ontimeupdate","Math","ceil","onpause","onloadeddata","onloadstart","navigator","mediaSession","setActionHandler","pause","onplay","onended","playErrorHandler","err","message","retry","play","catch","handleClose","setupForNewVideo","download","playOrPause","onSliderChange","val","handleAutoplayBtn","floor","Slider","max","min","padding","CircularProgress","size","Tooltip","variant","noWrap","Snackbar","open","onClose","ClickAwayListenerProps","onClickAway","action","Button","PlaylistRenderer","playlistVideos","currentIndex","on","setOn","setSuggestions","currentVId","setCurrentVId","toggleExpand","getSuggestions","info","component","paddingTop","paddingBottom","ChannelHeader","channelInfo","bestAvatar","Avatar","NUMBER_OF_VIDEO_TO_LOAD","App","end","setEnd","setPlaylistVideos","setCurrent","setSearchTerm","setVideos","displayVideos","setDisplayVideos","count","setCount","setContinuation","slice","console","log","loadMoreSearchResults","searchContinue","newVideos","filter","newContinuation","loadMoreYTPlaylistVideos","getYTplaylistByContinuation","loadMoreVideos","loader","concat","useVideos","onSearchTermChange","txt","searchVideos","search","onSearch","addSuggestionToPlaylist","undefined","setCurByVid","Provider","ThemeProvider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.17ad2341.chunk.js","sourcesContent":["import {SuggestVideo} from '../types'\r\nimport {Video as SearchVideo} from 'ytsr'\r\n\r\nexport const zeroPad = (num: number, places: number) => String(num).padStart(places, '0')\r\n\r\nexport const formatTime = (time: number) => {\r\n    time = Math.ceil(time)\r\n    return `${zeroPad(Math.floor(time/60), 2)}:${zeroPad(time%60, 2)}`\r\n}\r\n\r\nexport const durationToSeconds = (duration: string | null): number => {\r\n    if (duration === null) {\r\n        return 0\r\n    }\r\n    const numbers = duration.split(':')\r\n    let result: number = 0\r\n    let base = 1\r\n    for (let i = 0 ; i < numbers.length ; i++) {\r\n        result += parseInt(numbers[numbers.length - 1 - i])*base\r\n        base *= 60\r\n    }\r\n    return result\r\n}\r\n\r\nexport const isSuggestVideo = (obj: any): obj is SuggestVideo => {\r\n    return obj.thumbnail\r\n}\r\n\r\nexport const isSearchVideo = (obj: any): obj is SearchVideo => {\r\n    return obj.views\r\n}\r\n\r\nconst roundViews = (views:number , unit: number): string => {\r\n    return (views/unit).toFixed(1)\r\n}\r\n\r\nexport const formatViews = (views: number | null): string => {\r\n    if (views === null) return \"\"\r\n    const billion = 1000000000\r\n    const million = 1000000\r\n    const thousand = 1000 \r\n    if (views > billion) {\r\n        return `${roundViews(views, billion)}B Views`\r\n    }\r\n    if (views > million) {\r\n        return `${roundViews(views, million)}M Views`\r\n    }\r\n    if (views > thousand) {\r\n        return `${roundViews(views, thousand)}K Views`\r\n    }\r\n    return `${views} Views`\r\n}\r\n\r\nexport const openLink = (link: string) => {\r\n    const a = document.createElement('a')\r\n    a.href = link\r\n    a.target = '_blank'\r\n    a.rel = 'no-referrer'\r\n    a.click()\r\n}\r\n\r\nexport const sleep = (time: number) => {\r\n    return new Promise((res, _) => setTimeout(res, time))\r\n}","import {createMuiTheme} from '@material-ui/core'\r\n\r\nexport const URL = 'http://localhost:3001'\r\n\r\nexport const theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            light: '#303030',\r\n            main: '#000',\r\n            dark: '#303030',\r\n            contrastText: '#ffa600',\r\n        },\r\n        secondary: {\r\n            light: '#fff',\r\n            main: '#ffa600',\r\n            dark: '#fff',\r\n            contrastText: '#fff',\r\n        }\r\n    }\r\n})","import {URL} from '../constants'\r\nimport { VideoCache, SuggestVideo, SuggestionsCache, Video } from '../types'\r\nimport { Result as SearchResult, Continuation, ContinueResult } from 'ytsr'\r\nimport { Result as PlaylistResult, Continuation as PlaylistContinuation, ContinueResult as PlaylistContinueResult} from 'ytpl'\r\n\r\nexport class API {\r\n    private url: string\r\n    private cache: VideoCache\r\n    private suggestionsCache: SuggestionsCache\r\n    constructor(url: string) {\r\n        this.url = url\r\n        this.cache = {}\r\n        this.suggestionsCache = {}\r\n    }\r\n    public getYoutubeLink(videoId: string): string {\r\n        return `https://youtu.be/${videoId}`\r\n    }\r\n    public getInfo(videoId: string): Video {\r\n        return this.cache[videoId]\r\n    }\r\n    public getAudioURL(videoId: string): string {\r\n        return `${this.url}/stream/v2?vid=${videoId}`\r\n    }\r\n    public getAudioDownloadLink(videoId: string): HTMLAnchorElement {\r\n        const a = document.createElement('a')\r\n        a.href = `${this.url}/download?vid=${videoId}`\r\n        a.target = '_blank'\r\n        return a\r\n    }\r\n    public async suggest(videoId: string): Promise<Array<SuggestVideo> | null> {\r\n        if (videoId in this.suggestionsCache) {\r\n            return this.suggestionsCache[videoId]\r\n        }\r\n        try {\r\n            const res = await fetch(`${URL}/suggest?vid=${videoId}`)\r\n            const result: SuggestVideo[] = await res.json()\r\n            result.forEach(v => {\r\n                if (!(v.id in this.cache)) {\r\n                    this.cache[v.id] = v\r\n                }\r\n            })\r\n            this.suggestionsCache[videoId] = result\r\n            return result\r\n        } catch (err) {\r\n            return null\r\n        }\r\n    }\r\n    public async search(searchTerm: string): Promise<SearchResult | null> {\r\n        const formatSearchTearm = encodeURIComponent(searchTerm.replace(' ', '+'))\r\n        try {\r\n            const res = await fetch(`${URL}/search?q=${formatSearchTearm}`)\r\n            const result: SearchResult = await res.json()\r\n            result.items.forEach(i => {\r\n                if (i.type === 'video') {\r\n                    this.cache[i.id] = i\r\n                }\r\n            })\r\n            return result\r\n        } catch (err) {\r\n            return null\r\n        }\r\n    }\r\n    public async searchContinue(continuation: Continuation): Promise<ContinueResult | null> {\r\n        try {\r\n            const res = await fetch(`${URL}/search`, {\r\n                method: 'post',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(continuation)\r\n            })\r\n            const result: SearchResult = await res.json()\r\n            result.items.forEach(i => {\r\n                if (i.type === 'video') {\r\n                    this.cache[i.id] = i\r\n                }\r\n            })\r\n            return result\r\n        } catch (err) {\r\n            return null\r\n        }\r\n    }\r\n    public async getYTPlaylist(id: string): Promise<PlaylistResult | null> {\r\n        try {\r\n            const res = await fetch(`${URL}/playlist?pid=${id}`)\r\n            const playlist: PlaylistResult = await res.json()\r\n            playlist.items.forEach(item => {\r\n                if (item.id in this.cache) return\r\n                this.cache[item.id] = item\r\n            })\r\n            return playlist\r\n        } catch (err) {\r\n            return null\r\n        }\r\n    }\r\n    public async getYTplaylistByContinuation(continuation: PlaylistContinuation): Promise<PlaylistContinueResult | null> {\r\n        try {\r\n            const res = await fetch(`${URL}/playlist`, {\r\n                method: 'post',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(continuation)\r\n            })\r\n            const playlist: PlaylistContinueResult = await res.json()\r\n            playlist.items.forEach(item => {\r\n                if (item.id in this.cache) return\r\n                this.cache[item.id] = item\r\n            })\r\n            return playlist\r\n        } catch (err) {\r\n            return null\r\n        }\r\n    }\r\n}\r\n\r\nexport const api = new API(URL);","import { Video } from '../types'\r\nimport {API, api} from './API'\r\n\r\nexport class Playlist {\r\n    private videoIds: Array<string>;\r\n    public current: number;\r\n    private api: API;\r\n    constructor(api: API, videoIds?: Array<string>) {\r\n        this.videoIds = videoIds ? videoIds : []\r\n        this.current = -1\r\n        this.api = api\r\n        this.add = this.add.bind(this)\r\n        this.next = this.next.bind(this)\r\n    }\r\n    add(videoId: string) {\r\n        if (this.videoIds.indexOf(videoId) === -1) {\r\n            this.videoIds.push(videoId)\r\n        }\r\n    }\r\n    get playlistVideos(): Array<Video> {\r\n        return this.videoIds.map(id => this.api.getInfo(id))\r\n    }\r\n    setCurByVid(vid: string): number | void {\r\n        const newCur = this.videoIds.indexOf(vid)\r\n        if (newCur !== -1) {\r\n            this.current = newCur\r\n            return this.current\r\n        }\r\n    }\r\n    next(): number | void {\r\n        if (this.current < this.videoIds.length - 1) {\r\n            this.current += 1\r\n            return this.current\r\n        }\r\n    }\r\n    // return a suggested video id that is not in the playlist\r\n    public async suggest(): Promise<string | void> {\r\n        const videoId = this.videoIds[this.current]\r\n        const suggestions = await this.api.suggest(videoId)\r\n        if (suggestions) {\r\n            for (let suggestion of suggestions) {\r\n                const isNotInPlaylist = this.videoIds.indexOf(suggestion.id) === -1\r\n                if (isNotInPlaylist) {\r\n                    return suggestion.id\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const playlist = new Playlist(api)","import {API, api} from './API'\r\n\r\nexport class AudioManager {\r\n    public audio: HTMLAudioElement\r\n    private vid?: string;\r\n    private api: API\r\n    constructor(api: API, vid?: string) {\r\n        this.api = api\r\n        this.audio = new Audio()\r\n        if (vid) {\r\n            this.updateAudio(vid)\r\n        }\r\n    }\r\n\r\n    public updateAudio(vid: string): void {\r\n        if (vid === this.vid) return\r\n        this.vid = vid\r\n        const url = this.api.getAudioURL(vid)\r\n        this.audio.src = url\r\n    }\r\n\r\n    public retry(): void {\r\n        const originalSrc = this.audio.src\r\n        this.audio.src = ''\r\n        this.audio.src = originalSrc\r\n    }\r\n}\r\n\r\nexport const audioManager = new AudioManager(api);","import { createContext } from 'react'\r\nimport { VideoLoader } from '../types'\r\n\r\nexport const mainScreenVideoContext = createContext<{\r\n    setVideosWithLoading: (loadVideos: VideoLoader) => Promise<void>\r\n}>({\r\n    setVideosWithLoading: async () => {}\r\n})\r\n\r\nexport const playlistActionContext = createContext<{\r\n    playVideo: (index: number) => void,\r\n    addToPlaylist: (videoId: string) => void,\r\n    addToPlaylistThenPlay: (videoId: string) => void\r\n}>({\r\n    playVideo: () => { },\r\n    addToPlaylist: () => { },\r\n    addToPlaylistThenPlay: () => { }\r\n})\r\n\r\nexport const autoplayContext = createContext<{ autoplay: boolean, setAutoplay: (on: boolean) => void }>({\r\n    autoplay: true,\r\n    setAutoplay: () => { }\r\n})\r\n\r\nexport const videoListenerContext = createContext<{ onVideoEnd: () => void, onVideoStart: () => void }>({\r\n    onVideoEnd: () => { },\r\n    onVideoStart: () => { },\r\n})","import React from 'react'\r\nimport \"./Thumbnail.css\"\r\n\r\ninterface Props{\r\n    thumbnailUrl: string;\r\n    duration: string | null;\r\n}\r\n\r\nconst Thumbnail = ({thumbnailUrl, duration}: Props) => {\r\n    return (\r\n    <div className='thumbnail-container'>\r\n        <img\r\n            className='thumbnail-img'\r\n            src={thumbnailUrl}\r\n            alt='thumbnail'\r\n            loading='lazy'\r\n        />\r\n        <span className='thumbnail-txt'>{duration}</span>\r\n    </div>)\r\n}\r\n\r\nexport default Thumbnail","import React, { useCallback, useContext } from 'react'\r\nimport { Video } from '../types'\r\nimport { isSuggestVideo, isSearchVideo, formatViews } from '../utils'\r\nimport { api } from '../services'\r\nimport { IconButton } from '@material-ui/core'\r\nimport { mainScreenVideoContext } from '../context'\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline'\r\nimport DownloadIcon from '@material-ui/icons/GetApp'\r\nimport Thumbnail from './Thumbnail'\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline'\r\nimport clsx from 'clsx'\r\nimport './VideoListItem.css'\r\n\r\ninterface Props {\r\n    video: Video;\r\n    playing?: boolean;\r\n    onAddClick?: (vid: string) => void;\r\n    onPlayClick?: (vid: string) => void;\r\n    onDownloadClick?: (vid: string) => void;\r\n}\r\n\r\nconst VideoListItem = ({ video, playing, onAddClick, onPlayClick, onDownloadClick }: Props) => {\r\n    const {title, author} = video\r\n    const thumbnail = isSuggestVideo(video) ? video.thumbnail.url : video.bestThumbnail.url\r\n    const views = isSearchVideo(video) ? video.views : null\r\n    const {setVideosWithLoading} = useContext(mainScreenVideoContext)\r\n\r\n    const onAddClickHandler = useCallback(() => {\r\n        if (onAddClick) {\r\n            onAddClick(video.id)\r\n        }\r\n    }, [video, onAddClick])\r\n\r\n    const onDownloadClickHandler = useCallback(() => {\r\n        if (onDownloadClick) {\r\n            onDownloadClick(video.id)\r\n        }\r\n    }, [video, onDownloadClick])\r\n\r\n    const onPlayClickHandler = useCallback(() => {\r\n        if (onPlayClick) {\r\n            onPlayClick(video.id)\r\n        }\r\n    }, [video, onPlayClick])\r\n\r\n    const getChannelLoader = useCallback((channelID: string) => async () => {\r\n        const result = await api.getYTPlaylist(channelID)\r\n        const videos = result ? result.items : []\r\n        const continuation = result?.continuation\r\n        const channel = result?.author\r\n        return {videos, continuation, channel}\r\n    }, [])\r\n\r\n    const setChannel = useCallback(() => {\r\n        if (video.author) {\r\n            setVideosWithLoading(getChannelLoader(video.author.channelID))\r\n        }\r\n    }, [setVideosWithLoading, getChannelLoader, video])\r\n\r\n    return (\r\n        <div className={clsx('video-list-item-container', {playing})}>\r\n            {thumbnail && <Thumbnail thumbnailUrl={thumbnail} duration={video.duration}/>}\r\n            <div className='video-list-item-content'>\r\n                <div className='video-list-item-title single-line'>\r\n                    {title}\r\n                </div>\r\n                <div className='video-list-item-subtitle single-line' onClick={setChannel}>\r\n                    {author?.name}\r\n                </div>\r\n                <div className='video-list-item-subtitle single-line' onClick={setChannel}>\r\n                    {formatViews(views)}\r\n                </div>\r\n                <div className='video-list-item-row tools'>\r\n                    {!playing && onPlayClick && <IconButton onClick={onPlayClickHandler} color='secondary'>\r\n                        <PlayCircleOutlineIcon/>\r\n                    </IconButton>}\r\n                    {onAddClick && <IconButton onClick={onAddClickHandler} color='secondary'>\r\n                        <AddCircleOutlineIcon/>\r\n                    </IconButton>}\r\n                    {onDownloadClick && <IconButton onClick={onDownloadClickHandler} color='secondary'>\r\n                        <DownloadIcon/>\r\n                    </IconButton>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoListItem","import React, { useCallback, useState, useContext } from 'react'\r\nimport VideoListItem from './VideoListItem'\r\nimport { LinearProgress } from '@material-ui/core'\r\nimport { api } from '../services'\r\nimport { playlistActionContext } from '../context'\r\nimport { Video } from '../types'\r\n\r\ninterface Props{\r\n    loadVideos?: () => Promise<void>;\r\n    className?: string;\r\n    spaceBottom?: boolean;\r\n    videos: Array<Video>;\r\n    children?: JSX.Element;\r\n}\r\n\r\nconst VideoList = ({className, spaceBottom, loadVideos, videos, children}: Props) => {\r\n    const [loading, setLoading] = useState<boolean>(false)\r\n    const {addToPlaylist, addToPlaylistThenPlay} = useContext(playlistActionContext)\r\n    const onScroll: React.UIEventHandler<HTMLDivElement> = useCallback((e) => {\r\n        const d = e.currentTarget\r\n        if (loadVideos && !loading && d.scrollHeight - d.offsetHeight - d.scrollTop < 2) {\r\n            setLoading(true)\r\n            loadVideos().then(() => setLoading(false))\r\n        }\r\n    }, [loadVideos, loading])\r\n\r\n    const onAddClick = useCallback((videoId: string) => {\r\n        addToPlaylist(videoId)\r\n    }, [addToPlaylist])\r\n\r\n    const onDownloadClick = useCallback((videoId: string) => {\r\n        const a = api.getAudioDownloadLink(videoId)\r\n        a.click()\r\n    }, [])\r\n\r\n    const onPlayClick = useCallback((videoId: string) => {\r\n        addToPlaylistThenPlay(videoId)\r\n    }, [addToPlaylistThenPlay])\r\n    \r\n    return (\r\n    <div \r\n    className={className}\r\n    onScroll={onScroll}>\r\n        {children}\r\n        {videos.map(v =>\r\n            <VideoListItem\r\n                video={v}\r\n                key={v.id}\r\n                onAddClick={onAddClick}\r\n                onPlayClick={onPlayClick}\r\n                onDownloadClick={onDownloadClick}/>)}\r\n        {loading && <LinearProgress/>}\r\n        {spaceBottom && <div style={{height: 100}}/>}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default VideoList","import React, { useCallback, useState } from 'react'\r\nimport { Input, AppBar, Toolbar, InputAdornment, IconButton, Typography } from '@material-ui/core'\r\nimport ClearIcon from '@material-ui/icons/Clear'\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport './SearchBar.css'\r\n\r\ninterface Props{\r\n    onChange: (evt: any) => void;\r\n    onSubmit: () => void;\r\n}\r\n\r\nconst SearchBar = ({ onChange, onSubmit }: Props) => {\r\n    const [input, setInput] = useState<string>('')\r\n    const [inputMode, setInputMode] = useState<boolean>(false)\r\n\r\n    const onKeyPress = useCallback(evt => {\r\n        if (evt.charCode === 13) {\r\n            onSubmit()\r\n            evt.target.blur()\r\n        }\r\n    }, [onSubmit])\r\n\r\n    const handleInputChange = useCallback(evt => {\r\n        setInput(evt.target.value)\r\n        onChange(evt)\r\n    }, [onChange])\r\n\r\n    const handleClear = useCallback(() => {\r\n        setInput('')\r\n    }, [])\r\n\r\n    const handleBack = useCallback(() => {\r\n        setInputMode(false)\r\n    }, [])\r\n\r\n    const handleSearch = useCallback(() => {\r\n        setInputMode(true)\r\n    }, [])\r\n    return (\r\n            <AppBar position='static'>\r\n                {inputMode ?\r\n                <Toolbar>\r\n                    <IconButton color='secondary' edge=\"start\" onClick={handleBack}>\r\n                        <ArrowBackIosIcon/>\r\n                    </IconButton>\r\n                    <Input\r\n                        color='secondary'\r\n                        style={{color: 'white'}}\r\n                        placeholder=\"Search\"\r\n                        value={input}\r\n                        onChange={handleInputChange}\r\n                        onKeyPress={onKeyPress}\r\n                        fullWidth\r\n                        endAdornment={\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                aria-label=\"clear input\"\r\n                                color='secondary'\r\n                                onClick={handleClear}>\r\n                                    <ClearIcon/>\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        }/>\r\n                </Toolbar> : \r\n                <Toolbar>\r\n                    <Typography style={{flex: 1}}>YT Audio</Typography>\r\n                    <IconButton color='secondary' onClick={handleSearch}>\r\n                        <SearchIcon/>\r\n                    </IconButton>\r\n                </Toolbar>}\r\n            </AppBar>)\r\n}\r\n\r\nexport default SearchBar","import React, { useCallback, useEffect, useState, useContext } from 'react'\r\nimport { Slider, IconButton, Typography, Tooltip, CircularProgress, Snackbar, Button } from '@material-ui/core'\r\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled'\r\nimport PauseCircleFilledIcon from '@material-ui/icons/PauseCircleFilled'\r\nimport { formatTime, durationToSeconds } from '../utils'\r\nimport { api, audioManager } from '../services'\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow'\r\nimport PauseIcon from '@material-ui/icons/Pause'\r\nimport DownloadIcon from '@material-ui/icons/GetApp'\r\nimport { Video } from '../types'\r\nimport { autoplayContext, videoListenerContext } from '../context'\r\nimport './Player.css'\r\n\r\n\r\ninterface Props {\r\n    videoDetails: Video;\r\n}\r\n\r\nconst Player = ({ videoDetails }: Props) => {\r\n    const [playing, setPlaying] = useState<boolean>(false)\r\n    const [curVId, setCurVId] = useState<string | null>(null)\r\n    const [loading, setLoading] = useState<boolean>(false)\r\n    const [currentTime, setCurrentTime] = useState<number>(0)\r\n    const [errorMessage, setErrorMessage] = useState<string>('')\r\n    const {autoplay, setAutoplay} = useContext(autoplayContext)\r\n    const {onVideoEnd, onVideoStart} = useContext(videoListenerContext)\r\n\r\n    useEffect(() => {\r\n        audioManager.audio.ontimeupdate = () => setCurrentTime(Math.ceil(audioManager.audio.currentTime))\r\n        audioManager.audio.onpause = () => setPlaying(false)\r\n        audioManager.audio.onloadeddata = () => setLoading(false)\r\n        audioManager.audio.onloadstart = () => setLoading(true)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n\t\tconst listener = () => {\r\n\t\t\taudioManager.audio.pause()\r\n            setPlaying(false)\r\n            if (onVideoEnd) {\r\n                onVideoEnd()\r\n            }\r\n\t\t}\r\n\t\t(navigator as any).mediaSession.setActionHandler('nexttrack', listener)\r\n\t\treturn () => {\r\n            (navigator as any).mediaSession.setActionHandler('nexttrack', null)\r\n        }\r\n\t}, [onVideoEnd])\r\n\r\n\r\n    useEffect(() => {\r\n        audioManager.audio.onplay = () => {\r\n            setPlaying(true)\r\n            setErrorMessage('')\r\n            if (onVideoStart) {\r\n                onVideoStart()\r\n            }\r\n        }\r\n        audioManager.audio.onended = () => {\r\n            setPlaying(false)\r\n            if (onVideoEnd) {\r\n                onVideoEnd()\r\n            }\r\n        }\r\n    }, [onVideoStart, onVideoEnd])\r\n\r\n    const playErrorHandler = useCallback((err) => {\r\n        const isAborted = err.message.indexOf(\"aborted by the user agent\") !== -1\r\n        if (!isAborted) {\r\n            setLoading(false)\r\n            setErrorMessage(\"Failed to play the video\")\r\n        }\r\n    }, [])\r\n\r\n    const retry = useCallback(() => {\r\n        audioManager.retry()\r\n        audioManager.audio.play().catch(playErrorHandler)\r\n    }, [playErrorHandler])\r\n\r\n    const handleClose = useCallback(() => {\r\n        setErrorMessage('')\r\n    }, [])\r\n\r\n    const setupForNewVideo = useCallback((videoDetails: Video) => {\r\n        setCurVId(videoDetails.id)\r\n        audioManager.updateAudio(videoDetails.id)\r\n        setCurrentTime(0)\r\n        if (autoplay) {\r\n            audioManager.audio.play().catch(playErrorHandler)\r\n        }\r\n    }, [autoplay, playErrorHandler])\r\n\r\n    useEffect(() => {\r\n        if (curVId !== videoDetails.id) {\r\n            setupForNewVideo(videoDetails)\r\n        }\r\n    }, [setupForNewVideo, curVId, videoDetails])\r\n\r\n    const download = useCallback(() => {\r\n        const a = api.getAudioDownloadLink(videoDetails.id)\r\n        a.click()\r\n    }, [videoDetails])\r\n\r\n    const playOrPause = useCallback(() => {\r\n        if (playing) {\r\n            audioManager.audio.pause()\r\n        } else {\r\n            audioManager.audio.play()\r\n        }\r\n    }, [playing])\r\n\r\n    const onSliderChange = useCallback((_, val) => {\r\n        audioManager.audio.currentTime = val\r\n    }, [])\r\n\r\n    const handleAutoplayBtn = useCallback(() => {\r\n        setAutoplay(!autoplay)\r\n    }, [autoplay, setAutoplay])\r\n\r\n    return (\r\n        <div className='player-container'>\r\n            <div className='player-progress-container'>\r\n                <span className='player-current-time'>{formatTime(currentTime)}</span>\r\n                <Slider color='secondary' onChange={onSliderChange} max={durationToSeconds(videoDetails.duration)} min={0} value={currentTime} />\r\n                <span className='player-end-time'>{videoDetails.duration}</span>\r\n            </div>\r\n            <div className='player-bottom-container'>\r\n                {loading ? <div style={{ padding: 12 }}><CircularProgress color='secondary' size={22} /></div> :\r\n                    <IconButton onClick={playOrPause} color='secondary'>\r\n                        {playing ? <PauseIcon /> : <PlayArrowIcon />}\r\n                    </IconButton>}\r\n                <IconButton onClick={download} color='secondary'>\r\n                    <DownloadIcon />\r\n                </IconButton>\r\n                <Tooltip title=\"autoplay\">\r\n                    <IconButton onClick={handleAutoplayBtn} color='secondary'>\r\n                        {autoplay ? <PauseCircleFilledIcon /> : <PlayCircleFilledIcon />}\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <div className='player-details-container'>\r\n                    <Typography variant=\"subtitle1\" noWrap>{videoDetails.title}</Typography>\r\n                    <Typography variant=\"subtitle2\" style={{ color: 'silver' }} noWrap>{videoDetails.author?.name}</Typography>\r\n                </div>\r\n            </div>\r\n            <Snackbar\r\n                open={errorMessage !== ''}\r\n                onClose={handleClose}\r\n                message={errorMessage}\r\n                color=\"secondary\"\r\n                ClickAwayListenerProps={{onClickAway: () => {}}}\r\n                action={\r\n                    <Button color=\"secondary\" size=\"small\" onClick={retry}>\r\n                        Retry\r\n                    </Button>\r\n                }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Player","import React, { useState, useCallback, useEffect, useContext } from \"react\"\r\nimport clsx from 'clsx'\r\nimport './PlaylistRenderer.css'\r\nimport {IconButton, LinearProgress, Typography} from '@material-ui/core'\r\nimport Up from '@material-ui/icons/ExpandLess'\r\nimport Down from '@material-ui/icons/ExpandMore'\r\nimport Player from './Player'\r\nimport VideoList from './VideoList'\r\nimport VideoListItem from \"./VideoListItem\"\r\nimport {Video, SuggestVideo} from '../types'\r\nimport {api} from '../services'\r\nimport {playlistActionContext} from '../context'\r\n\r\ninterface Props {\r\n    playlistVideos: Array<Video>;\r\n    currentIndex: number;\r\n}\r\n\r\nconst PlaylistRenderer = ({playlistVideos, currentIndex}: Props) => {\r\n    const [on, setOn] = useState<boolean>(false)\r\n    const [suggestions, setSuggestions] = useState<SuggestVideo[]>([])\r\n    const [loading, setLoading] = useState<boolean>(false)\r\n    const [currentVId, setCurrentVId] = useState<string | null>(null)\r\n    const {playVideo} = useContext(playlistActionContext)\r\n\r\n    const toggleExpand = useCallback(() => {\r\n        setOn(!on)\r\n    }, [on])\r\n\r\n    const getSuggestions = useCallback(async (vid: string) => {\r\n        setLoading(true)\r\n        const res = await api.suggest(vid)\r\n        if (res) {\r\n            setSuggestions(res)\r\n        } else {\r\n            setSuggestions([])\r\n        }\r\n        setLoading(false)\r\n    }, [])\r\n\r\n    const onDownloadClick = useCallback((videoId: string) => {\r\n        const a = api.getAudioDownloadLink(videoId)\r\n        a.click()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (currentVId) {\r\n            getSuggestions(currentVId)\r\n        }\r\n    }, [currentVId, getSuggestions])\r\n\r\n    useEffect(() => {\r\n        setCurrentVId(playlistVideos[currentIndex]?.id)\r\n    }, [currentIndex, playlistVideos])\r\n\r\n    return (\r\n        <div className={clsx('playlist', {open: on})}>\r\n            <div className='top-section'>\r\n                <div className='player-container'>\r\n                {currentIndex >= playlistVideos.length?\r\n                    <LinearProgress/> :\r\n                    <Player videoDetails={playlistVideos[currentIndex]}/>}\r\n                </div>\r\n                <IconButton onClick={toggleExpand} color='secondary'>\r\n                    {on ? <Down/> : <Up/>}\r\n                </IconButton>\r\n            </div>\r\n            <div className='lists-container'>\r\n            <div className={clsx('list')}>\r\n                {playlistVideos\r\n                    .map((info, id) =>\r\n                        <VideoListItem\r\n                            key={`playlist${id}`}\r\n                            video={info}\r\n                            onPlayClick={() => playVideo(id)}\r\n                            onDownloadClick={onDownloadClick}\r\n                            playing={id === currentIndex}/>)}\r\n            </div>\r\n            <Typography className={clsx('divider')} variant='h5' component='h5'>Suggested</Typography>\r\n            {loading ?\r\n                <div style={{paddingTop: 30, paddingBottom: 30}}><LinearProgress/></div> :\r\n                <VideoList videos={suggestions} className={clsx('list')}/>\r\n            }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlaylistRenderer","import React from 'react'\r\nimport { ChannelInfo } from '../types'\r\nimport { Avatar } from '@material-ui/core'\r\nimport './ChannelHeader.css'\r\n\r\ninterface Props {\r\n    channelInfo: ChannelInfo\r\n}\r\n\r\nconst ChannelHeader = ({ channelInfo }: Props) => {\r\n    return (\r\n        <div className='channel-header-container'>\r\n            {channelInfo.bestAvatar.url ?\r\n                <Avatar className='avatar' alt={channelInfo.name} src={channelInfo.bestAvatar.url}/> :\r\n                <Avatar className='avatar'>{channelInfo.name[0]}</Avatar>}\r\n            <span className='name'>{channelInfo.name}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChannelHeader","import { useState, useCallback, useEffect } from \"react\"\r\nimport { Continuation as SearchContinuation} from 'ytsr'\r\nimport { Continuation as YTPlaylistContinuation } from 'ytpl'\r\nimport { ChannelInfo, Video, VideoLoader } from '../types'\r\nimport { api } from '../services'\r\nimport { sleep } from '../utils'\r\n\r\nconst NUMBER_OF_VIDEO_TO_LOAD = 15\r\n\r\nexport function useVideos() {\r\n\tconst [channel, setChannel] = useState<ChannelInfo | undefined>()\r\n\tconst [videos, setVideos] = useState<Array<Video>>([])\r\n    const [displayVideos, setDisplayVideos] = useState<Array<Video>>([])\r\n\tconst [count, setCount] = useState<number>(NUMBER_OF_VIDEO_TO_LOAD)\r\n    const [continuation, setContinuation] = useState<SearchContinuation | YTPlaylistContinuation | undefined | null>()\r\n\tconst [loading, setLoading] = useState<boolean>(false)\r\n    useEffect(() => {\r\n        setDisplayVideos(videos.slice(0, count))\r\n    }, [videos, count])\r\n\tconst setVideosWithLoading = useCallback(async (loadVideos: VideoLoader) => {\r\n\t\tif (!loading) {\r\n\t\t\tsetLoading(true)\r\n\t\t\ttry {\r\n\t\t\t\tconst {videos, continuation, channel} = await loadVideos()\r\n\t\t\t\tsetVideos(videos)\r\n\t\t\t\tsetContinuation(continuation)\r\n\t\t\t\tsetChannel(channel)\r\n                setCount(NUMBER_OF_VIDEO_TO_LOAD)\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.log(err)\r\n\t\t\t}\r\n\t\t\tsetLoading(false)\r\n\t\t}\r\n\t}, [loading])\r\n\tconst loadMoreSearchResults = useCallback(async (continuation: SearchContinuation) => {\r\n\t\tconst result = await api.searchContinue(continuation)\r\n\t\tif (result) {\r\n\t\t\tconst newVideos = result.items.filter(i => i.type === 'video') as Video[]\r\n\t\t\treturn {newVideos, newContinuation: result.continuation}\r\n\t\t}\r\n\t}, [])\r\n\tconst loadMoreYTPlaylistVideos = useCallback(async (continuation: YTPlaylistContinuation) => {\r\n\t\tconst result = await api.getYTplaylistByContinuation(continuation)\r\n\t\tif (result) {\r\n\t\t\tconst newVideos = result.items as Video[]\r\n\t\t\treturn {newVideos, newContinuation: result.continuation}\r\n\t\t}\r\n\t}, [])\r\n\tconst loadMoreVideos = useCallback(async () => {\r\n        if (videos.length - count >= NUMBER_OF_VIDEO_TO_LOAD) {\r\n            await sleep(500)\r\n            return setCount(count + NUMBER_OF_VIDEO_TO_LOAD)\r\n        }\r\n\t\tif (!continuation) {\r\n            if (videos.length > count) return setCount(count + NUMBER_OF_VIDEO_TO_LOAD)\r\n            return\r\n        }\r\n\t\tconst loader = channel ? loadMoreYTPlaylistVideos : loadMoreSearchResults\r\n\t\tconst result = await loader(continuation)\r\n\t\tif (result) {\r\n\t\t\tconst newVideos = videos.concat(result.newVideos)\r\n            if (videos.length > count)  setCount(count + NUMBER_OF_VIDEO_TO_LOAD)\r\n            setVideos(newVideos)\r\n\t\t\tsetContinuation(result.newContinuation)\r\n\t\t}\r\n\t\t\r\n\t}, [continuation, videos, channel, count, loadMoreSearchResults, loadMoreYTPlaylistVideos])\r\n\r\n\treturn {videos: displayVideos, channel, loading, setVideosWithLoading, loadMoreVideos}\r\n}","import './App.css';\r\nimport { useState, useCallback, useEffect } from 'react'\r\nimport VideoList from './components/VideoList'\r\nimport SearchBar from './components/SearchBar'\r\nimport PlaylistRenderer from './components/PlaylistRenderer'\r\nimport { theme } from './constants'\r\nimport { api, playlist } from './services'\r\nimport { LinearProgress, ThemeProvider } from '@material-ui/core'\r\nimport { Video } from './types';\r\nimport { mainScreenVideoContext, autoplayContext, videoListenerContext, playlistActionContext } from './context'\r\nimport ChannelHeader from './components/ChannelHeader'\r\nimport { useVideos } from './hooks'\r\n\r\nfunction App() {\r\n\tconst [end, setEnd] = useState<boolean>(true)\r\n\tconst [autoplay, setAutoplay] = useState<boolean>(true)\r\n\tconst [playlistVideos, setPlaylistVideos] = useState<Array<Video>>([])\r\n\tconst [current, setCurrent] = useState<number | null>(null)\r\n\tconst [searchTerm, setSearchTerm] = useState<string>('')\r\n\tconst {videos, channel, loading, setVideosWithLoading, loadMoreVideos} = useVideos()\r\n\r\n\tconst onSearchTermChange = useCallback((evt) => {\r\n\t\tconst txt = evt.target.value\r\n\t\tsetSearchTerm(txt)\r\n\t}, [])\r\n\r\n\tconst searchVideos = useCallback(async () => {\r\n\t\tconst result = await api.search(searchTerm)\r\n\t\tconst videos = result?.items.filter(i => i.type === 'video') as Video[]\r\n\t\tconst continuation = result?.continuation\r\n\t\treturn {videos, continuation}\r\n\t}, [searchTerm])\r\n\r\n\tconst onSearch = useCallback(async () => {\r\n\t\tsetVideosWithLoading(searchVideos)\r\n\t}, [setVideosWithLoading, searchVideos])\r\n\r\n\tconst addToPlaylist = useCallback((videoId: string) => {\r\n\t\tplaylist.add(videoId)\r\n\t\tsetPlaylistVideos(playlist.playlistVideos)\r\n\t}, [])\r\n\r\n\tconst addSuggestionToPlaylist = useCallback(async () => {\r\n\t\tconst suggestion = await playlist.suggest()\r\n\t\tif (suggestion) {\r\n\t\t\taddToPlaylist(suggestion)\r\n\t\t}\r\n\t}, [addToPlaylist])\r\n\r\n\tuseEffect(() => {\r\n\t\t//for autoplaying next video\r\n\t\tif (end && autoplay && playlistVideos.length > 0) {\r\n\t\t\tconst next = playlist.next()\r\n\t\t\tif (next === undefined) {\r\n\t\t\t\taddSuggestionToPlaylist()\r\n\t\t\t} else {\r\n\t\t\t\tsetCurrent(next)\r\n\t\t\t}\r\n\t\t}\r\n\t}, [end, autoplay, playlistVideos, addSuggestionToPlaylist])\r\n\r\n\tconst onVideoEnd = useCallback(() => {\r\n\t\tsetEnd(true)\r\n\t}, [])\r\n\r\n\tconst onVideoStart = useCallback(() => {\r\n\t\tsetEnd(false)\r\n\t}, [])\r\n\r\n\tconst playVideo = useCallback((id: number) => {\r\n\t\tplaylist.current = id\r\n\t\tsetCurrent(id)\r\n\t}, [])\r\n\r\n\tconst addToPlaylistThenPlay = useCallback((videoId: string) => {\r\n\t\taddToPlaylist(videoId)\r\n\t\tplaylist.setCurByVid(videoId)\r\n\t\tsetCurrent(playlist.current)\r\n\t\tsetEnd(false)\r\n\t}, [addToPlaylist])\r\n\t\r\n\treturn (\r\n\t\t<mainScreenVideoContext.Provider value={{setVideosWithLoading}}>\r\n\t\t<playlistActionContext.Provider value={{addToPlaylist, playVideo, addToPlaylistThenPlay}}>\r\n\t\t<videoListenerContext.Provider value={{onVideoEnd, onVideoStart}}>\r\n\t\t<autoplayContext.Provider value={{autoplay, setAutoplay}}>\r\n\t\t<ThemeProvider theme={theme}>\r\n\t\t\t<div className='background'>\r\n\t\t\t\t<SearchBar onChange={onSearchTermChange} onSubmit={onSearch} />\r\n\t\t\t\t{loading ?\r\n\t\t\t\t\t<LinearProgress /> :\r\n\t\t\t\t\t<VideoList\r\n\t\t\t\t\t\tclassName={'video-list'}\r\n\t\t\t\t\t\tspaceBottom\r\n\t\t\t\t\t\tvideos={videos}\r\n\t\t\t\t\t\tloadVideos={loadMoreVideos}>\r\n\t\t\t\t\t\t\t{channel && <ChannelHeader channelInfo={channel}/>}\r\n\t\t\t\t\t</VideoList>}\r\n\t\t\t\t{current !== null && <PlaylistRenderer\r\n\t\t\t\t\tplaylistVideos={playlistVideos}\r\n\t\t\t\t\tcurrentIndex={current}/>}\r\n\t\t\t</div>\r\n\t\t</ThemeProvider>\r\n\t\t</autoplayContext.Provider>\r\n\t\t</videoListenerContext.Provider>\r\n\t\t</playlistActionContext.Provider>\r\n\t\t</mainScreenVideoContext.Provider>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}