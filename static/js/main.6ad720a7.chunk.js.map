{"version":3,"sources":["utils/index.ts","constants/index.ts","services/API.ts","services/Playlist.ts","services/AudioManager.ts","context/index.ts","components/VideoListItem.tsx","components/VideoList.tsx","components/SearchBar.tsx","components/Player.tsx","components/PlaylistItem.tsx","components/PlaylistRenderer.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["zeroPad","num","places","String","padStart","durationToSeconds","duration","numbers","split","result","base","i","length","parseInt","isSuggestVideo","obj","thumbnail","URL","theme","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","api","url","cache","suggestionsCache","this","videoId","a","document","createElement","href","target","fetch","res","json","forEach","v","id","searchTerm","formatSearchTearm","encodeURIComponent","replace","items","type","continuation","method","headers","body","JSON","stringify","playlist","videoIds","current","add","bind","next","indexOf","push","map","getInfo","vid","newCur","suggest","suggestions","suggestion","audioManager","audio","Audio","updateAudio","getAudioURL","src","videoContext","createContext","videos","playlistActionContext","playVideo","addToPlaylist","autoplayContext","autoplay","setAutoplay","videoListenerContext","onVideoEnd","onVideoStart","VideoListItem","video","title","bestThumbnail","useContext","onVidClick","useCallback","className","alt","loading","getYoutubeLink","rel","IconButton","onClick","color","VideoList","spaceBottom","loadVideos","useState","setLoading","onScroll","e","d","currentTarget","scrollHeight","offsetHeight","scrollTop","then","LinearProgress","style","height","SearchBar","onChange","onSubmit","input","setInput","inputMode","setInputMode","onKeyPress","evt","charCode","blur","handleInputChange","value","handleClear","handleBack","handleSearch","AppBar","position","Toolbar","edge","Input","placeholder","fullWidth","endAdornment","InputAdornment","aria-label","Typography","flex","Player","videoDetails","playing","setPlaying","curVId","setCurVId","currentTime","setCurrentTime","useEffect","ontimeupdate","Math","ceil","onpause","onloadeddata","onloadstart","onplay","onended","setupForNewVideo","play","catch","console","log","time","download","getAudioDownloadLink","click","playOrPause","pause","onSliderChange","_","val","handleAutoplayBtn","floor","Slider","max","min","padding","CircularProgress","size","Tooltip","variant","noWrap","author","name","PlaylistItem","thumbnailUrl","clsx","PlaylistRenderer","playlistVideos","currentIndex","on","setOn","setSuggestions","currentVId","setCurrentVId","toggleExpand","getSuggestions","Provider","open","info","component","paddingTop","paddingBottom","App","setVideos","end","setEnd","setPlaylistVideos","setContinuation","setCurrent","setSearchTerm","onSearchTermChange","txt","onSearch","search","filter","addSuggestionToPlaylist","undefined","loadMoreSearchResult","searchContinue","newVideos","concat","ThemeProvider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6ad720a7.chunk.js","sourcesContent":["import {SuggestVideo} from '../types'\r\n\r\nexport const zeroPad = (num: number, places: number) => String(num).padStart(places, '0')\r\n\r\nexport const formatTime = (time: number) => {\r\n    time = Math.ceil(time)\r\n    return `${zeroPad(Math.floor(time/60), 2)}:${zeroPad(time%60, 2)}`\r\n}\r\n\r\nexport const durationToSeconds = (duration: string | null): number => {\r\n    if (duration === null) {\r\n        return 0\r\n    }\r\n    const numbers = duration.split(':')\r\n    let result: number = 0\r\n    let base = 1\r\n    for (let i = 0 ; i < numbers.length ; i++) {\r\n        result += parseInt(numbers[numbers.length - 1 - i])*base\r\n        base *= 60\r\n    }\r\n    return result\r\n}\r\n\r\nexport const isSuggestVideo = (obj: any): obj is SuggestVideo => {\r\n    return obj.thumbnail\r\n}","import {createMuiTheme} from '@material-ui/core'\r\n\r\nexport const URL = 'https://zb3ad4304-gtw.qovery.io'\r\n\r\nexport const theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            light: '#303030',\r\n            main: '#000',\r\n            dark: '#303030',\r\n            contrastText: '#ffa600',\r\n        },\r\n        secondary: {\r\n            light: '#fff',\r\n            main: '#ffa600',\r\n            dark: '#fff',\r\n            contrastText: '#fff',\r\n        }\r\n    }\r\n})","import {URL} from '../constants'\r\nimport { VideoCache, SuggestVideo, SuggestionsCache } from '../types'\r\nimport { Result as SearchResult, Video, Continuation, ContinueResult } from 'ytsr'\r\n\r\nexport class API {\r\n    private url: string\r\n    private cache: VideoCache\r\n    private suggestionsCache: SuggestionsCache\r\n    constructor(url: string) {\r\n        this.url = url\r\n        this.cache = {}\r\n        this.suggestionsCache = {}\r\n    }\r\n    public getYoutubeLink(videoId: string): string {\r\n        return `https://youtu.be/${videoId}`\r\n    }\r\n    public getInfo(videoId: string): Video | SuggestVideo {\r\n        return this.cache[videoId]\r\n    }\r\n    public getAudioURL(videoId: string): string {\r\n        return `${this.url}/stream/v2?vid=${videoId}`\r\n    }\r\n    public getAudioDownloadLink(videoId: string): HTMLAnchorElement {\r\n        const a = document.createElement('a')\r\n        a.href = `${this.url}/download?vid=${videoId}`\r\n        a.target = '_blank'\r\n        return a\r\n    }\r\n    public async suggest(videoId: string): Promise<Array<SuggestVideo> | null> {\r\n        if (videoId in this.suggestionsCache) {\r\n            return this.suggestionsCache[videoId]\r\n        }\r\n        try {\r\n            const res = await fetch(`${URL}/suggest?vid=${videoId}`)\r\n            const result: SuggestVideo[] = await res.json()\r\n            result.forEach(v => {\r\n                if (!(v.id in this.cache)) {\r\n                    this.cache[v.id] = v\r\n                }\r\n            })\r\n            this.suggestionsCache[videoId] = result\r\n            return result\r\n        } catch (err) {\r\n            return null\r\n        }\r\n    }\r\n    public async search(searchTerm: string): Promise<SearchResult | null> {\r\n        const formatSearchTearm = encodeURIComponent(searchTerm.replace(' ', '+'))\r\n        try {\r\n            const res = await fetch(`${URL}/search?q=${formatSearchTearm}`)\r\n            const result: SearchResult = await res.json()\r\n            result.items.forEach(i => {\r\n                if (i.type === 'video') {\r\n                    this.cache[i.id] = i\r\n                }\r\n            })\r\n            return result\r\n        } catch (err) {\r\n            return null\r\n        }\r\n    }\r\n    public async searchContinue(continuation: Continuation): Promise<ContinueResult | null> {\r\n        try {\r\n            const res = await fetch(`${URL}/search`, {\r\n                method: 'post',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(continuation)\r\n            })\r\n            const result: SearchResult = await res.json()\r\n            result.items.forEach(i => {\r\n                if (i.type === 'video') {\r\n                    this.cache[i.id] = i\r\n                }\r\n            })\r\n            return result\r\n        } catch (err) {\r\n            return null\r\n        }\r\n    }\r\n}\r\n\r\nexport const api = new API(URL);","import { SuggestVideo } from '../types'\r\nimport { Video } from 'ytsr'\r\nimport {API, api} from './API'\r\n\r\nexport class Playlist {\r\n    private videoIds: Array<string>;\r\n    public current: number;\r\n    private api: API;\r\n    constructor(api: API, videoIds?: Array<string>) {\r\n        this.videoIds = videoIds ? videoIds : []\r\n        this.current = -1\r\n        this.api = api\r\n        this.add = this.add.bind(this)\r\n        this.next = this.next.bind(this)\r\n    }\r\n    add(videoId: string) {\r\n        if (this.videoIds.indexOf(videoId) === -1) {\r\n            this.videoIds.push(videoId)\r\n        }\r\n    }\r\n    get playlistVideos(): Array<Video | SuggestVideo> {\r\n        return this.videoIds.map(id => this.api.getInfo(id))\r\n    }\r\n    setCurByVid(vid: string): number | void {\r\n        const newCur = this.videoIds.indexOf(vid)\r\n        if (newCur !== -1) {\r\n            this.current = newCur\r\n            return this.current\r\n        }\r\n    }\r\n    next(): number | void {\r\n        if (this.current < this.videoIds.length - 1) {\r\n            this.current += 1\r\n            return this.current\r\n        }\r\n    }\r\n    // return a suggested video id that is not in the playlist\r\n    public async suggest(): Promise<string | void> {\r\n        const videoId = this.videoIds[this.current]\r\n        const suggestions = await this.api.suggest(videoId)\r\n        if (suggestions) {\r\n            for (let suggestion of suggestions) {\r\n                const isNotInPlaylist = this.videoIds.indexOf(suggestion.id) === -1\r\n                if (isNotInPlaylist) {\r\n                    return suggestion.id\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const playlist = new Playlist(api)","import {API, api} from './API'\r\n\r\nexport class AudioManager {\r\n    public audio: HTMLAudioElement\r\n    private vid?: string;\r\n    private api: API\r\n    constructor(api: API, vid?: string) {\r\n        this.api = api\r\n        this.audio = new Audio()\r\n        if (vid) {\r\n            this.updateAudio(vid)\r\n        }\r\n    }\r\n\r\n    public updateAudio(vid: string): void {\r\n        if (vid === this.vid) return\r\n        this.vid = vid\r\n        const url = this.api.getAudioURL(vid)\r\n        this.audio.src = url\r\n    }\r\n}\r\n\r\nexport const audioManager = new AudioManager(api);","import { createContext } from 'react'\r\nimport { Video } from 'ytsr'\r\nimport { SuggestVideo } from '../types'\r\n\r\nexport const videoContext = createContext<{ videos: Array<Video | SuggestVideo> }>({\r\n    videos: []\r\n})\r\n\r\nexport const playlistActionContext = createContext<{ playVideo: (index: number) => void, addToPlaylist: (videoId: string) => void }>({\r\n    playVideo: () => { },\r\n    addToPlaylist: () => { }\r\n\r\n})\r\n\r\nexport const autoplayContext = createContext<{ autoplay: boolean, setAutoplay: (on: boolean) => void }>({\r\n    autoplay: true,\r\n    setAutoplay: () => { }\r\n})\r\n\r\nexport const videoListenerContext = createContext<{ onVideoEnd: () => void, onVideoStart: () => void }>({\r\n    onVideoEnd: () => { },\r\n    onVideoStart: () => { },\r\n})","import React, { useCallback, useContext } from 'react'\r\nimport {Video} from 'ytsr'\r\nimport {SuggestVideo} from '../types'\r\nimport { isSuggestVideo } from '../utils'\r\nimport {IconButton} from '@material-ui/core'\r\nimport {api} from '../services'\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline'\r\nimport {playlistActionContext} from '../context'\r\nimport './VideoListItem.css'\r\n\r\ninterface Props {\r\n    video: Video | SuggestVideo;\r\n}\r\n\r\nconst VideoListItem = ({ video }: Props) => {\r\n    const {title, id} = video\r\n    const thumbnail = isSuggestVideo(video) ? video.thumbnail.url : video.bestThumbnail.url\r\n    const {addToPlaylist} = useContext(playlistActionContext)\r\n    const onVidClick = useCallback(() => {\r\n        addToPlaylist(video.id)\r\n    }, [video, addToPlaylist])\r\n    return (\r\n        <div className='video-list-item-container'>\r\n            {thumbnail && <img\r\n                src={thumbnail}\r\n                alt='thumbnail'\r\n                loading='lazy'\r\n            />}\r\n            <div className='content'>\r\n            <div className='title'>\r\n                {title}\r\n            </div>\r\n            <a className=\"subtitle\" href={api.getYoutubeLink(id)} target='_blank' rel='noreferrer'>\r\n                Open in YouTube\r\n            </a>\r\n            </div>\r\n            <IconButton onClick={onVidClick} color='secondary'>\r\n                <AddCircleOutlineIcon/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoListItem","import React, { useCallback, useState, useContext } from 'react'\r\nimport VideoListItem from './VideoListItem'\r\nimport { LinearProgress } from '@material-ui/core'\r\nimport { videoContext } from '../context'\r\n\r\ninterface Props{\r\n    loadVideos?: () => Promise<void>;\r\n    className?: string;\r\n    spaceBottom?: boolean;\r\n}\r\n\r\nconst VideoList = ({className, spaceBottom, loadVideos}: Props) => {\r\n    const [loading, setLoading] = useState<boolean>(false)\r\n    const {videos} = useContext(videoContext)\r\n    const onScroll: React.UIEventHandler<HTMLDivElement> = useCallback((e) => {\r\n        const d = e.currentTarget\r\n        if (loadVideos && !loading && d.scrollHeight - d.offsetHeight - d.scrollTop < 2) {\r\n            setLoading(true)\r\n            loadVideos().then(() => setLoading(false))\r\n        }\r\n    }, [loadVideos, loading])\r\n    \r\n    return (\r\n    <div \r\n    className={className}\r\n    onScroll={onScroll}>\r\n        {videos.map(v => <VideoListItem video={v} key={v.id}/>)}\r\n        {loading && <LinearProgress/>}\r\n        {spaceBottom && <div style={{height: 100}}/>}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default VideoList","import React, { useCallback, useState } from 'react'\r\nimport { Input, AppBar, Toolbar, InputAdornment, IconButton, Typography } from '@material-ui/core'\r\nimport ClearIcon from '@material-ui/icons/Clear'\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport './SearchBar.css'\r\n\r\ninterface Props{\r\n    onChange: (evt: any) => void;\r\n    onSubmit: () => void;\r\n}\r\n\r\nconst SearchBar = ({ onChange, onSubmit }: Props) => {\r\n    const [input, setInput] = useState<string>('')\r\n    const [inputMode, setInputMode] = useState<boolean>(false)\r\n\r\n    const onKeyPress = useCallback(evt => {\r\n        if (evt.charCode === 13) {\r\n            onSubmit()\r\n            evt.target.blur()\r\n        }\r\n    }, [onSubmit])\r\n\r\n    const handleInputChange = useCallback(evt => {\r\n        setInput(evt.target.value)\r\n        onChange(evt)\r\n    }, [onChange])\r\n\r\n    const handleClear = useCallback(() => {\r\n        setInput('')\r\n    }, [])\r\n\r\n    const handleBack = useCallback(() => {\r\n        setInputMode(false)\r\n    }, [])\r\n\r\n    const handleSearch = useCallback(() => {\r\n        setInputMode(true)\r\n    }, [])\r\n    return (\r\n            <AppBar position='static'>\r\n                {inputMode ?\r\n                <Toolbar>\r\n                    <IconButton color='secondary' edge=\"start\" onClick={handleBack}>\r\n                        <ArrowBackIosIcon/>\r\n                    </IconButton>\r\n                    <Input\r\n                        color='secondary'\r\n                        style={{color: 'white'}}\r\n                        placeholder=\"Search\"\r\n                        value={input}\r\n                        onChange={handleInputChange}\r\n                        onKeyPress={onKeyPress}\r\n                        fullWidth\r\n                        endAdornment={\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                aria-label=\"clear input\"\r\n                                color='secondary'\r\n                                onClick={handleClear}>\r\n                                    <ClearIcon/>\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        }/>\r\n                </Toolbar> : \r\n                <Toolbar>\r\n                    <Typography style={{flex: 1}}>ListenTube</Typography>\r\n                    <IconButton color='secondary' onClick={handleSearch}>\r\n                        <SearchIcon/>\r\n                    </IconButton>\r\n                </Toolbar>}\r\n            </AppBar>)\r\n}\r\n\r\nexport default SearchBar","import React, { useCallback, useEffect, useState, useContext } from 'react'\r\nimport { Slider, IconButton, Typography, Tooltip, CircularProgress } from '@material-ui/core'\r\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled'\r\nimport PauseCircleFilledIcon from '@material-ui/icons/PauseCircleFilled'\r\nimport { formatTime, durationToSeconds } from '../utils'\r\nimport { api, audioManager } from '../services'\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow'\r\nimport PauseIcon from '@material-ui/icons/Pause'\r\nimport DownloadIcon from '@material-ui/icons/GetApp'\r\nimport { Video } from 'ytsr'\r\nimport { SuggestVideo } from '../types'\r\nimport { autoplayContext, videoListenerContext } from '../context'\r\nimport './Player.css'\r\n\r\n\r\ninterface Props {\r\n    videoDetails: Video | SuggestVideo;\r\n}\r\n\r\nconst Player = ({ videoDetails }: Props) => {\r\n    const [playing, setPlaying] = useState<boolean>(false)\r\n    const [curVId, setCurVId] = useState<string | null>(null)\r\n    const [loading, setLoading] = useState<boolean>(false)\r\n    const [currentTime, setCurrentTime] = useState<number>(0)\r\n    const {autoplay, setAutoplay} = useContext(autoplayContext)\r\n    const {onVideoEnd, onVideoStart} = useContext(videoListenerContext)\r\n\r\n    useEffect(() => {\r\n        audioManager.audio.ontimeupdate = () => setCurrentTime(Math.ceil(audioManager.audio.currentTime))\r\n        audioManager.audio.onpause = () => setPlaying(false)\r\n        audioManager.audio.onloadeddata = () => setLoading(false)\r\n        audioManager.audio.onloadstart = () => setLoading(true)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        audioManager.audio.onplay = () => {\r\n            setPlaying(true)\r\n            if (onVideoStart) {\r\n                onVideoStart()\r\n            }\r\n        }\r\n        audioManager.audio.onended = () => {\r\n            setPlaying(false)\r\n            if (onVideoEnd) {\r\n                onVideoEnd()\r\n            }\r\n        }\r\n    }, [onVideoStart, onVideoEnd])\r\n\r\n    const setupForNewVideo = useCallback((videoDetails: Video | SuggestVideo) => {\r\n        setCurVId(videoDetails.id)\r\n        audioManager.updateAudio(videoDetails.id)\r\n        setCurrentTime(0)\r\n        if (autoplay) {\r\n            audioManager.audio.play().catch(console.log)\r\n        }\r\n    }, [autoplay])\r\n\r\n    useEffect(() => {\r\n        if (curVId !== videoDetails.id) {\r\n            setupForNewVideo(videoDetails)\r\n        }\r\n    }, [setupForNewVideo, curVId, videoDetails])\r\n\r\n    const download = useCallback(() => {\r\n        const a = api.getAudioDownloadLink(videoDetails.id)\r\n        a.click()\r\n    }, [videoDetails])\r\n\r\n    const playOrPause = useCallback(() => {\r\n        if (playing) {\r\n            audioManager.audio.pause()\r\n        } else {\r\n            audioManager.audio.play()\r\n        }\r\n    }, [playing])\r\n\r\n    const onSliderChange = useCallback((_, val) => {\r\n        audioManager.audio.currentTime = val\r\n    }, [])\r\n\r\n    const handleAutoplayBtn = useCallback(() => {\r\n        setAutoplay(!autoplay)\r\n    }, [autoplay, setAutoplay])\r\n\r\n    return (\r\n        <div className='player-container'>\r\n            <div className='player-progress-container'>\r\n                <span className='player-current-time'>{formatTime(currentTime)}</span>\r\n                <Slider color='secondary' onChange={onSliderChange} max={durationToSeconds(videoDetails.duration)} min={0} value={currentTime} />\r\n                <span className='player-end-time'>{videoDetails.duration}</span>\r\n            </div>\r\n            <div className='player-bottom-container'>\r\n                {loading ? <div style={{ padding: 12 }}><CircularProgress color='secondary' size={22} /></div> :\r\n                    <IconButton onClick={playOrPause} color='secondary'>\r\n                        {playing ? <PauseIcon /> : <PlayArrowIcon />}\r\n                    </IconButton>}\r\n                <IconButton onClick={download} color='secondary'>\r\n                    <DownloadIcon />\r\n                </IconButton>\r\n                <Tooltip title=\"autoplay\">\r\n                    <IconButton onClick={handleAutoplayBtn} color='secondary'>\r\n                        {autoplay ? <PauseCircleFilledIcon /> : <PlayCircleFilledIcon />}\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <div className='player-details-container'>\r\n                    <Typography variant=\"subtitle1\" noWrap>{videoDetails.title}</Typography>\r\n                    <Typography variant=\"subtitle2\" style={{ color: 'silver' }} noWrap>{videoDetails.author?.name}</Typography>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Player","import React from 'react'\r\nimport {Video} from 'ytsr'\r\nimport {SuggestVideo} from '../types'\r\nimport { isSuggestVideo } from '../utils'\r\nimport {IconButton} from '@material-ui/core'\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline'\r\nimport clsx from 'clsx'\r\nimport './PlaylistItem.css'\r\n\r\ninterface Props {\r\n    video: Video | SuggestVideo;\r\n    playing?: boolean;\r\n    playVideo: () => void;\r\n}\r\n\r\nconst PlaylistItem = ({ video, playing, playVideo }: Props) => {\r\n    const { title, author } = video\r\n    const thumbnailUrl = isSuggestVideo(video) ? video.thumbnail.url : video.bestThumbnail.url\r\n\r\n    return (\r\n        <div className={clsx('play-list-item-container', {playing})}>\r\n            {thumbnailUrl && <img\r\n                src={thumbnailUrl}\r\n                alt='thumbnail'\r\n                loading='lazy'\r\n            />}\r\n            <div className='content'>\r\n            <div className='title'>\r\n                {title}\r\n            </div>\r\n            <div className=\"subtitle\">\r\n                {author?.name}\r\n            </div>\r\n            </div>\r\n            <IconButton className={clsx('icon', {playing})} onClick={playVideo} color='secondary'>\r\n                <PlayCircleOutlineIcon/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlaylistItem","import React, { useState, useCallback, useEffect, useContext } from \"react\"\r\nimport clsx from 'clsx'\r\nimport './PlaylistRenderer.css'\r\nimport {IconButton, LinearProgress, Typography} from '@material-ui/core'\r\nimport Up from '@material-ui/icons/ExpandLess'\r\nimport Down from '@material-ui/icons/ExpandMore'\r\nimport Player from './Player'\r\nimport VideoList from './VideoList'\r\nimport {Video} from 'ytsr'\r\nimport PlaylistItem from \"./PlaylistItem\"\r\nimport {SuggestVideo} from '../types'\r\nimport {api} from '../services'\r\nimport {videoContext, playlistActionContext} from '../context'\r\n\r\ninterface Props {\r\n    playlistVideos: Array<Video | SuggestVideo>;\r\n    currentIndex: number;\r\n}\r\n\r\nconst PlaylistRenderer = ({playlistVideos, currentIndex}: Props) => {\r\n    const [on, setOn] = useState<boolean>(false)\r\n    const [suggestions, setSuggestions] = useState<SuggestVideo[]>([])\r\n    const [loading, setLoading] = useState<boolean>(false)\r\n    const [currentVId, setCurrentVId] = useState<string | null>(null)\r\n    const {playVideo} = useContext(playlistActionContext)\r\n\r\n    const toggleExpand = useCallback(() => {\r\n        setOn(!on)\r\n    }, [on])\r\n\r\n    const getSuggestions = useCallback(async (vid: string) => {\r\n        setLoading(true)\r\n        const res = await api.suggest(vid)\r\n        if (res) {\r\n            setSuggestions(res)\r\n        } else {\r\n            setSuggestions([])\r\n        }\r\n        setLoading(false)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (currentVId) {\r\n            getSuggestions(currentVId)\r\n        }\r\n    }, [currentVId, getSuggestions])\r\n\r\n    useEffect(() => {\r\n        setCurrentVId(playlistVideos[currentIndex]?.id)\r\n    }, [currentIndex, playlistVideos])\r\n\r\n    return (\r\n        <videoContext.Provider value={{videos: suggestions}}>\r\n        <div className={clsx('playlist', {open: on})}>\r\n            <div className='top-section'>\r\n                <div className='player-container'>\r\n                {currentIndex >= playlistVideos.length?\r\n                    <LinearProgress/> :\r\n                    <Player videoDetails={playlistVideos[currentIndex]}/>}\r\n                </div>\r\n                <IconButton onClick={toggleExpand} color='secondary'>\r\n                    {on ? <Down/> : <Up/>}\r\n                </IconButton>\r\n            </div>\r\n            <div className='lists-container'>\r\n            <div className={clsx('list')}>\r\n                {playlistVideos\r\n                    .map((info, id) =>\r\n                        <PlaylistItem\r\n                            key={`playlist${id}`}\r\n                            video={info}\r\n                            playVideo={() => playVideo(id)}\r\n                            playing={id === currentIndex}/>)}\r\n            </div>\r\n            <Typography className={clsx('divider')} variant='h5' component='h5'>Suggested</Typography>\r\n            {loading ?\r\n                <div style={{paddingTop: 30, paddingBottom: 30}}><LinearProgress/></div> : <VideoList className={clsx('list')}/>\r\n            }\r\n            </div>\r\n        </div>\r\n        </videoContext.Provider>\r\n    )\r\n}\r\n\r\nexport default PlaylistRenderer","import './App.css';\r\nimport { useState, useCallback } from 'react'\r\nimport VideoList from './components/VideoList'\r\nimport SearchBar from './components/SearchBar'\r\nimport PlaylistRenderer from './components/PlaylistRenderer'\r\nimport { theme } from './constants'\r\nimport { api, playlist } from './services'\r\nimport { LinearProgress, ThemeProvider } from '@material-ui/core'\r\nimport {Video, Continuation} from 'ytsr'\r\nimport { useEffect } from 'react';\r\nimport { SuggestVideo } from './types';\r\nimport { videoContext, autoplayContext, videoListenerContext, playlistActionContext } from './context'\r\n\r\n\r\nfunction App() {\r\n\tconst [videos, setVideos] = useState<Array<Video>>([])\r\n\tconst [end, setEnd] = useState<boolean>(true)\r\n\tconst [autoplay, setAutoplay] = useState<boolean>(true)\r\n\tconst [loading, setLoading] = useState<boolean>(false)\r\n\tconst [playlistVideos, setPlaylistVideos] = useState<Array<Video | SuggestVideo>>([])\r\n\tconst [continuation, setContinuation] = useState<Continuation | null>(null)\r\n\tconst [current, setCurrent] = useState<number | null>(null)\r\n\tconst [searchTerm, setSearchTerm] = useState<string>('')\r\n\r\n\tconst onSearchTermChange = useCallback((evt) => {\r\n\t\tconst txt = evt.target.value\r\n\t\tsetSearchTerm(txt)\r\n\t}, [])\r\n\r\n\tconst onSearch = useCallback(async () => {\r\n\t\tsetLoading(true)\r\n\t\ttry {\r\n\t\t\tconst result = await api.search(searchTerm)\r\n\t\t\tif (result) {\r\n\t\t\t\tsetVideos(result.items.filter(i => i.type === 'video') as Video[])\r\n\t\t\t\tsetContinuation(result.continuation)\r\n\t\t\t} else {\r\n\t\t\t\tsetVideos([])\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log(err)\r\n\t\t}\r\n\t\tsetLoading(false)\r\n\t}, [searchTerm])\r\n\r\n\tconst addToPlaylist = useCallback((videoId: string) => {\r\n\t\tplaylist.add(videoId)\r\n\t\tsetPlaylistVideos(playlist.playlistVideos)\r\n\t}, [])\r\n\r\n\tconst addSuggestionToPlaylist = useCallback(async () => {\r\n\t\tconst suggestion = await playlist.suggest()\r\n\t\tif (suggestion) {\r\n\t\t\taddToPlaylist(suggestion)\r\n\t\t}\r\n\t}, [addToPlaylist])\r\n\r\n\tuseEffect(() => {\r\n\t\t//for autoplaying next video\r\n\t\tif (end && autoplay && playlistVideos.length > 0) {\r\n\t\t\tconst next = playlist.next()\r\n\t\t\tif (next === undefined) {\r\n\t\t\t\taddSuggestionToPlaylist()\r\n\t\t\t} else {\r\n\t\t\t\tsetCurrent(next)\r\n\t\t\t}\r\n\t\t}\r\n\t}, [end, autoplay, playlistVideos, addSuggestionToPlaylist])\r\n\r\n\tconst onVideoEnd = useCallback(() => {\r\n\t\tsetEnd(true)\r\n\t}, [])\r\n\r\n\tconst onVideoStart = useCallback(() => {\r\n\t\tsetEnd(false)\r\n\t}, [])\r\n\r\n\tconst playVideo = useCallback((id: number) => {\r\n\t\tplaylist.current = id\r\n\t\tsetCurrent(id)\r\n\t}, [])\r\n\r\n\tconst loadMoreSearchResult = useCallback(async () => {\r\n\t\tif (continuation === null) return\r\n\t\tconst result = await api.searchContinue(continuation)\r\n\t\tif (result) {\r\n\t\t\tconst newVideos = result.items.filter(i => i.type === 'video') as Video[]\r\n\t\t\tsetVideos(videos.concat(newVideos))\r\n\t\t\tsetContinuation(result.continuation)\r\n\t\t}\r\n\t}, [continuation, videos])\r\n\treturn (\r\n\t\t<playlistActionContext.Provider value={{addToPlaylist, playVideo}}>\r\n\t\t<videoListenerContext.Provider value={{onVideoEnd, onVideoStart}}>\r\n\t\t<videoContext.Provider value={{videos}}>\r\n\t\t<autoplayContext.Provider value={{autoplay, setAutoplay}}>\r\n\t\t<ThemeProvider theme={theme}>\r\n\t\t\t<div className='background'>\r\n\t\t\t\t<SearchBar onChange={onSearchTermChange} onSubmit={onSearch} />\r\n\t\t\t\t{loading ?\r\n\t\t\t\t\t<LinearProgress /> :\r\n\t\t\t\t\t<VideoList\r\n\t\t\t\t\t\tclassName={'video-list'}\r\n\t\t\t\t\t\tspaceBottom\r\n\t\t\t\t\t\tloadVideos={loadMoreSearchResult}/>}\r\n\t\t\t\t{current !== null && <PlaylistRenderer\r\n\t\t\t\t\tplaylistVideos={playlistVideos}\r\n\t\t\t\t\tcurrentIndex={current}/>}\r\n\t\t\t</div>\r\n\t\t</ThemeProvider>\r\n\t\t</autoplayContext.Provider>\r\n\t\t</videoContext.Provider>\r\n\t\t</videoListenerContext.Provider>\r\n\t\t</playlistActionContext.Provider>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}